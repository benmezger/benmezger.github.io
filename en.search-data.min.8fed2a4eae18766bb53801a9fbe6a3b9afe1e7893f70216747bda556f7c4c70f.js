'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/notes/git_change_commit_author/','title':"Git change commit author",'section':"Index",'content':" tags Programming Software Engineering  The following scripts changes all repository commits from an specific author to a new author. This is specially handy if you mess up your git config at somepoint without knowing and start commiting with a random author or you change your email/name.\n#!/bin/sh  git filter-branch --env-filter \u0026#39; OLD_EMAIL=\u0026#34;your-old-email@example.com\u0026#34; CORRECT_NAME=\u0026#34;Your Correct Name\u0026#34; CORRECT_EMAIL=\u0026#34;your-correct-email@example.com\u0026#34; if [ \u0026#34;$GIT_COMMITTER_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_COMMITTER_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_COMMITTER_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi if [ \u0026#34;$GIT_AUTHOR_EMAIL\u0026#34; = \u0026#34;$OLD_EMAIL\u0026#34; ] then export GIT_AUTHOR_NAME=\u0026#34;$CORRECT_NAME\u0026#34; export GIT_AUTHOR_EMAIL=\u0026#34;$CORRECT_EMAIL\u0026#34; fi \u0026#39; --tag-name-filter cat -- --branches --tags "});index.add({'id':1,'href':'/posts/automating-and-testing-dotfiles/','title':"Automating and testing dotfiles",'section':"Posts",'content':"I run multiple Archlinux machines at home and an OSX machine for work, so I need to keep my system configuration in sync. I have a lot of applications tinkered for my workflow — I don’t want to switch computers and have to reconfigure something every time I change in another machine. stow or a bash script could allow us to manage files, but they are limited when a specific non-scripting configuration requires different settings for a specific machine. For example, my Alacritty requires different settings for OSX and Linux.\nI solved this issue by keeping multiple branches for multiple machines, but that sucked when I updated a configuration and I needed to sync with my main branch (Linux). Handling merge conflicts or cherry-picking commits was tiring. Eventually, after trying out stow for years and bash scripts, I came up with a neat workflow\nChezmoi to the rescue #  Chezmoi solved the branching issue as it allows me to handle multiple configurations for different machines, by using templates of non-scripting configurations for inserting context before copying the file. This solves the headaches with merge conflicts and having to maintain multiple branches. I now need one branch for keeping my files and let Chezmoi handle the configuration context and changes when required.\nHandling installation with Ansible #  Yet, I still have the dependency problem when reinstalling my operating system, I almost always remember the applications I use, but not always all their non-required dependencies, also, as I keep multiple OSes, some program differ. Keeping a bash script in my dotfiles could solve this, but that would require some time to maintain an installation script for each OS.\nI choose Ansible to handle my dependency installation. I keep 4 Ansible roles, osx for anything related to osx installation, archlinux for arch related stuff, linux for common Linux commands and common, shared between osx and archlinux (it takes care of cloning external repositories, applying Chezmoi, etc).\nThis allows me to easily install my configuration in a new machine and update any new dependency I added to my toolkit.\nContinuous Integration #  I mentioned before that I am working more from OSX due to my job, so I tend to miss Archlinux package updates/removals, and I always end up having to tinker my Archlinux Ansible roles with the new packages or configuration when they change, again, tiring. I decided to install my dotfiles on a CI, using Github Workflow. My current Github workflow runs 2 jobs, one for Archlinux (running on Ubuntu with Docker) and another with MacOS. Both runs Ansible, installs all dependencies, does some system checks, and finally caches the result.\nThis allows me to keep up with Archlinux/OSX updates a bit faster and making sure my Ansible is fully functional — if one of the CI fail, something happened with the dependencies or my configuration.\nGoing down the hole #  With this dotfile structure, I can easily write test scripts for asserting if files were correctly copied, packages installed, etc. For example, I could write a Python script which asserts if files are correctly in place, I could then set this script to run after Ansible did it’s job.\nimport pathlib import os import platform HOME = pathlib.Path(os.getenv(\u0026#34;HOME\u0026#34;, \u0026#34;.\u0026#34;)).absolute() def osx_verify_copied_files(home: str = HOME, required=(\u0026#34;.zshrc\u0026#34;, \u0026#34;.zshenv\u0026#34;)): for f in required: print(f\u0026#34;Checking if {HOME.joinpath(f)} exists\u0026#34;) assert HOME.joinpath(f).exists() == True, \u0026#34;{f} does not exist\u0026#34; def osx_verify_hostname(hostname): print(f\u0026#34;Verifying if hostname \u0026#39;{hostname}\u0026#39; is set\u0026#34;) assert platform.node() == hostname, \u0026#34;Hostname does not match\u0026#34; osx_verify_copied_files() osx_verify_hostname(\u0026#34;benmezger-ckl.local\u0026#34;) Checking if /Users/benmezger/.zshrc exists Checking if /Users/benmezger/.zshenv exists Verifying if hostname \u0026#39;benmezger-ckl.local\u0026#39; is set Emacs org mode #  I live in Emacs, this blog is written in Org mode and Hugo, my snippets are stored in an org file and my code is written in Emacs. To ease my life, I decided to keep a COMMAND.org file with general commands I might need when tinkering with my dotfiles. Org mode supports literate programming, so keeping a COMMAND.org file allows me to execute the commands in-buffer. I simply C-c C-c in the snippet and let org mode make it happen. This is nice when I am tinkering my dotfiles and I need to apply changes with Chezmoi, for example.\nConclusion #  System configuration is important for a stable workflow, as we don’t want to change much when switching machines, Ansible allows us to keep multiple installations up to date and Chezmoi allows handling these configurations file properly. Keeping your dotfiles in a CI sounds overwhelming, however, it does guarantee your installation scripts are fully functional against multiple OSes and you will know when something bad happened.\n.org-center { margin-left: auto; margin-right: auto; text-align: center; }     "});index.add({'id':3,'href':'/notes/personal_git_workflow/','title':"Personal git workflow",'section':"Index",'content':" tags Git Programming Workflow  As of today, this is currently my git flow for most of my projects.\nCommit messages #  From: https://chris.beams.io/posts/git-commit/\n Feat: Any code that contains only a new feature, whether a new model field, a new API flag, etc Refactor: Any general code refactoring that does not contain anything new nor fixes anything. Chore: Anything related to the build configuration, dependency updates Docs: Anything related to documentation. This could be a function/class doc, READMEs, etc. Fix: Anything that fixes a bug or any bad business logic  Don\u0026rsquo;t commit unrelated code, it\u0026rsquo;s easy for us to quickly change a function name and commit together with the new feature. Don\u0026rsquo;t do that. Separate your commits nicely, it will be much easier to revert commits, view logs and understand the development flow of a project.\nCapital vs lower case #  I like things in capital, both the type and the commit message, but that\u0026rsquo;s just my preference. Follow the project best pratices, if they use lower, stick with that.\nBranches #  Branches are temporary, but they do appear in a merge commit, so make sure the branch name makes sense. Branch names are separated by what they bring to the code-base (fix, feat, refactor, etc). This make it easier to read logs, you know immediately from a merge commit that some feature that does X was merged.\nExamples:\n feat/create-read-syscall fix/remove-bad-create-user-flag refactor/move-syscalls-to-syscallsdir chore/update-external-dependencies  Code tests #  I\u0026rsquo;ve seen lots of repositories with test commits, where they usually bring a new test to some specific function. These are fine if you are adding a new test to something that existed long before, however, if you are writing a new function together with the test, make sure you commit both together. This allows us to revert a specific commit without having to revert twice in case the test is some commit after/before the feature.\nDon\u0026rsquo;t:\n5e2ac95 | * Fix: install dotenv on base not in dev, cause it is always used on app init d0b041f | * Test: Add models tests 52b781d | * Feat: added version control models Do:\n5e2ac95 | * Fix: install dotenv on base not in dev, cause it is always used on app init 52b781d | * Feat: added version control models I tend to indeed make test commit messages, however, before pushing the branch, I run a git rebase -i so I can fixup commits that should be together and reorganize the order of them.\nBefore a rebase:\ncadf28c Test: Add question type tests [Ben Mezger] b0a4537 Test: Add surveyadmin list test [Ben Mezger] b0a40a7 Feat: Add institution to SurveyAdmin's list_filter [Ben Mezger] bb0c7b0 Feat: Add question 'type' to SurveyAdmin's list_display [Ben Mezger] 842133a Feat: Enable list_filter for SurveyQuestionAdmin [Ben Mezger] 849823a Test: Add list filter tests [Ben Mezger] cadf28c Feat: Add list_filter for user admin [Ben Mezger] bd12b9c Fix: Migrate question type to survey response [Ben Mezger] After a rebase:\nb0a40a7 Feat: Add institution to SurveyAdmin's list_filter [Ben Mezger] bb0c7b0 Feat: add question 'type' to SurveyAdmin's list_display [Ben Mezger] 849823a Feat: Enable list_filter for SurveyQuestionAdmin [Ben Mezger] cadf28c Feat: Add list_filter for user admin [Ben Mezger] bd12b9c Fix: Migrate question type to survey response [Ben Mezger] Merges #  Merging outside a service like Github? Then make sure you use git merge --no-ff instead of a git merge. This will prevent git from executing a fast-forward.\nKeep it clean, stupid #  Make sure you logs are readable. Having bad logs is the same as not having logs at all. Make sure you keep a readable history for yourself and others. Debugging bad commits will be much easier when running git bisect and your coworkers will thank you.\n"});index.add({'id':4,'href':'/notes/kommunistische_partei_deutschlands/','title':"Kommunistische Partei Deutschlands (KPD)",'section':"Index",'content':" tags History Politics  KPD election poster, 1932. The caption at the bottom reads \u0026lsquo;An end to this system!'.\n\n  Figure 1: KPD election poster, 1932. The caption at the bottom reads \u0026lsquo;An end to this system!\u0026rsquo;.\n  Related links #   https://en.wikipedia.org/wiki/Communist%5FParty%5Fof%5FGermany  "});index.add({'id':5,'href':'/notes/python_temporary_file/','title':"Python temporary file",'section':"Index",'content':" tags Python Programming  Python\u0026rsquo;s tempfile standard library is pretty neat when we need to create a temporary file and/or directories. Instead of having a much of code like this:\nimport pathlib def create_file(filename): if pathlib.Path(filename).exists(): # handle path removal/rewrite/backup pass with open(filename, \u0026#34;w\u0026#34;) as f: # write to file pass We can ask Python to take care of handling this type of tasks for us. tempfile handles most of the OS API, so we can focus on writting the logic instead.\nimport tempfile def create_file(): return tempfile.NamedTemporaryFile(mode=\u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) # file one print(create_file()) print(create_file().name) # file two print(create_file()) print(create_file().name) \u0026lt;tempfile._TemporaryFileWrapper object at 0x7f46864bb898\u0026gt; /tmp/tmpheedprs9 \u0026lt;tempfile._TemporaryFileWrapper object at 0x7f46864bb898\u0026gt; /tmp/tmp7nol8aa4 NamedTemporaryFile returns a file-like object that can be used as a temporary storage, however, contrary to TemporaryFile, a file created with NamedTemporaryFile is guaranteed to have a visible name during its lifetime. TemporaryFile gets destroyed as soon as the file is closed, NamedTemporaryFile has support for the delete flags, which defaults to True\nYou can also change the default filename prefix and suffix.\nimport tempfile def create_file(suffix=\u0026#34;.json\u0026#34;, prefix=\u0026#34;tmpfile\u0026#34;): return tempfile.NamedTemporaryFile( mode=\u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;, suffix=suffix, prefix=prefix, ) # file one print(create_file(suffix=\u0026#34;.csv\u0026#34;)) print(create_file(suffix=\u0026#34;.csv\u0026#34;).name) print(create_file(suffix=\u0026#34;.csv\u0026#34;, prefix=\u0026#34;hello-world\u0026#34;).name) \u0026lt;tempfile._TemporaryFileWrapper object at 0x7f1195ab69e8\u0026gt; /tmp/tmpfileuzad3kkp.csv /tmp/hello-world4ahj1984.csv With TemporaryFile it returns a TextIOWrapper:\nimport tempfile def create_file(suffix=\u0026#34;.json\u0026#34;, prefix=\u0026#34;tmpfile\u0026#34;): return tempfile.TemporaryFile( mode=\u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;, suffix=suffix, prefix=prefix, ) # file one print(create_file(suffix=\u0026#34;.csv\u0026#34;)) print(create_file(suffix=\u0026#34;.csv\u0026#34;, prefix=\u0026#34;hello-world\u0026#34;).name) \u0026lt;_io.TextIOWrapper name=3 mode=\u0026#39;w\u0026#39; encoding=\u0026#39;utf-8\u0026#39;\u0026gt; 3 "});index.add({'id':6,'href':'/notes/python_async/','title':"Python Async",'section':"Index",'content':" tags Python Programming  Important keywords #   Asynchronous IO (async IO) Language-agnostic paradigm (model) coroutine A Python (sort of generator function) async/await Python keywords used to defined a coroutine asyncio Python package that provides an API for running/managing coroutines  Coroutine #  A coroutine allows a function to pause before returning or indirectly call another coroutine for some time, for example:\nimport asyncio import time async def count(n): print(f\u0026#34;n is {n}\u0026#34;) await asyncio.sleep(n) print(f\u0026#34;Returning from {n}\u0026#34;) async def main(): await asyncio.gather(count(1), count(2), count(3)) m = time.perf_counter() asyncio.run(main()) elapsed = time.perf_counter() - m print(f\u0026#34;Executed in {elapsed:0.2f} seconds.\u0026#34;) n is 1 n is 2 n is 3 Returning from 1 Returning from 2 Returning from 3 Executed in 3.00 seconds. "});index.add({'id':7,'href':'/notes/using_macros_in_emacs/','title':"Using macros in Emacs",'section':"Index",'content':" tags Emacs  Emacs macros allows us to record sequence of keyboard keystrokes, mouse actions, menu actions that is bound to an Emacs command. It allows us to record these actions and repeat them when needed.\nCreating a new macro #   C-x ( starts recording a macro C-x ) stops recording a macro C-x e executes the macro C-u 37 C-x e executes the macro 37 times C-u 0 C-x e executes the macro an infinite number of times until EOF.  Testing #  Create a macro to remove the - from the following fruit list and replace it with an + (org-mode has still already setup, but for learning purpose, let\u0026rsquo;s do it with a macro).\nPlace the cursor the banana section and start recording a macro. Remove the first - from Banana and replace it with +, move to the next line (apple) and stop recording the macro. Run C-u 0 C-x e to run the macro until EOF.\n Banana Apple Melon Grape Orange Watermelon Kiwi  It is important to stop defining a macro at a similar position to where you started it. Executing apply-macro-to-region-lines applies the last-defined keyboard macro to each of the lines of a region\nResources #   EmacsWiki - Keyboard macros elmacro - Shows keyboard macros or latest interactive commands as emacs lisp GNU Emacs - Keyboard Macros  "});index.add({'id':8,'href':'/notes/data_and_reality_a_timeless_perspective_on_perceiving_and_managing_information_in_our_imprecise_world/','title':"Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World",'section':"Index",'content':"Backlinks #   Database   tags Database Computer Science  READING Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World #  Table 1: Clock summary at [2020-07-13 Mon 08:05]     Headline Time     Total time 1:01   Data and Reality: A Timeless\u0026hellip; 1:01    :BOOK_CATEGORY: Database, software architecture, software engineering :BOOK_AUTHORS: William Kent :START_DATE:\u0026lt;2020-07-12 Sun\u0026gt; :END_DATE: nil :URL: https://www.goodreads.com/book/show/19305264-data-and-reality\n"});index.add({'id':9,'href':'/notes/methodologies/','title':"Methodologies",'section':"Index",'content':"Backlinks #   Use case template   tags Programming Software Engineering  "});index.add({'id':10,'href':'/notes/software_engineering/','title':"Software Engineering",'section':"Index",'content':"Backlinks #   Methodologies Use case template   tags Programming Computer Science  "});index.add({'id':11,'href':'/notes/use_case_template/','title':"Use case template",'section':"Index",'content':" tags Computer Science Programming Methodologies Software Engineering  The following is a requirements template developed by Alistair Cockburn. This template may or may not have all or more fields related to the requirements itself.\nRecommended reading:\n Basic Use Case Template      USE CASE #N      Goal in context    Scope    Level \u0026lt;one of: Summary, Primary task, Subfunction\u0026gt;   Preconditions    Success end condition    Failed end condition    Primary actor \u0026lt;a role name for the primary actor, or description\u0026gt;   Trigger \u0026lt;the action upon the system that starts the use case, may be time event\u0026gt;   Priority \u0026lt;how critical to your system/organization\u0026gt;   Frequency     Usage example:\nUser profile #     USE CASE #1 Create user account     Goal in context Client expects to create and account   Scope User account system   Level Primary task   Preconditions User model exists and ready to save new users   Success end condition User gets account created and receives a notification upon creation   Failed end condition Unable to create user   Primary actor User   Trigger Invocation of user creation   Priority Top priority   Frequency Common, users create new account from time to time    "});index.add({'id':12,'href':'/notes/go_interfaces/','title':"Go interfaces",'section':"Index",'content':" tags Go Programming Programming Code snippets  The following implements a DataModel, like Django\u0026rsquo;s Model class which requires Validate and Save methods be implemented by whoever uses that Interface. The problem is the Model. m object will be nil, because Model cannot access the User due to the embedded Model struct within the User struct.\npackage main import \u0026#34;fmt\u0026#34; type DataModel interface { Validate() Save() } type Model struct { DataModel } func (m *Model) Validate(){ fmt.Println(\u0026#34;Validating..\u0026#34;, m) } func (m *Model) Save(){ fmt.Println(\u0026#34;Saving..\u0026#34;, m) } type User struct { name string Model } func main(){ user := \u0026amp;User{name: \u0026#34;Benjamin\u0026#34;} fmt.Println(user) user.Validate() user.Save() } \u0026amp;{Benjamin {\u0026lt;nil\u0026gt;}} Validating.. \u0026amp;{\u0026lt;nil\u0026gt;} Saving.. \u0026amp;{\u0026lt;nil\u0026gt;} "});index.add({'id':13,'href':'/notes/database/','title':"Database",'section':"Index",'content':"Backlinks #   Postgres Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World  Notes from Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World\nWilliam tries to approach data towards how we perceive the world. The following key concepts can be considered in data modeling as to our inner domain.\n Existence: To what extend are you really present and engaged in the process of life around yourself? How real are the physical things around you? Identity: Who are you? What is the true nature that identifies you? Attributes: What kind of person are you? What are your values, assets and so on. Relationships: What are the qualities of your interactions with parents, friends, lovers, etc? What are your connection with things material, social, and otherwise? What are your needs? What are the issues and problems? Behavior: What should you plan to do in various situations? What might be the consequences, both indented and not indented? Modeling: How useful and accurate are the constructs you use to explain all these things? How effective are these kinds of explanation in helping you change what needs to be changed?  "});index.add({'id':14,'href':'/notes/postgres/','title':"Postgres",'section':"Index",'content':"Backlinks #   List Foreign key constrants defined in a database   tags Computer Architecture Computer Science Database  "});index.add({'id':15,'href':'/notes/list_foreign_key_constrants_defined_in_a_database/','title':"List Foreign key constrants defined in a database",'section':"Index",'content':" tags Programming Code snippets Postgres Postgres  View foreign key constrants defined in all databases\nselect kcu.table_schema || \u0026#39;.\u0026#39; ||kcu.table_name as foreign_table, \u0026#39;\u0026gt;-\u0026#39; as rel, rel_tco.table_schema || \u0026#39;.\u0026#39; || rel_tco.table_name as primary_table, string_agg(kcu.column_name, \u0026#39;, \u0026#39;) as fk_columns, kcu.constraint_name from information_schema.table_constraints tco join information_schema.key_column_usage kcu on tco.constraint_schema = kcu.constraint_schema and tco.constraint_name = kcu.constraint_name join information_schema.referential_constraints rco on tco.constraint_schema = rco.constraint_schema and tco.constraint_name = rco.constraint_name join information_schema.table_constraints rel_tco on rco.unique_constraint_schema = rel_tco.constraint_schema and rco.unique_constraint_name = rel_tco.constraint_name where tco.constraint_type = \u0026#39;FOREIGN KEY\u0026#39; group by kcu.table_schema, kcu.table_name, rel_tco.table_name, rel_tco.table_schema, kcu.constraint_name order by kcu.table_schema, kcu.table_name; Returns\n+-----------------+-------+-----------------+--------------+-----------------------+ | foreign_table | rel | primary_table | fk_columns | constraint_name | |-----------------+-------+-----------------+--------------+-----------------------| | public.profiles | \u0026gt;- | public.users | user_id | profiles_user_id_fkey | +-----------------+-------+-----------------+--------------+-----------------------+ SELECT 1 Time: 0.031s "});index.add({'id':16,'href':'/notes/go_reading_struct_tag/','title':"Go reading struct tag",'section':"Index",'content':" tags Go Programming Programming Code snippets  The following code reads a specific struct Tag by name.\nimport ( \u0026#34;reflect\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;fmt\u0026#34; ) type Profile struct { Id int `validate:\u0026#34;numeric\u0026#34; json:\u0026#34;id\u0026#34;` First string `validate:\u0026#34;required\u0026#34; json:\u0026#34;first\u0026#34;` Last string `validate:\u0026#34;required\u0026#34; json:\u0026#34;last\u0026#34;` Birth string `validate:\u0026#34;required\u0026#34; json:\u0026#34;birth\u0026#34;` Sex string `validate:\u0026#34;required\u0026#34; json:\u0026#34;sex\u0026#34;` MaritalStatus string `validate:\u0026#34;required\u0026#34; json:\u0026#34;marital_status\u0026#34;` Children int `validate:\u0026#34;numeric\u0026#34; json:\u0026#34;children\u0026#34;` } func GetStructFieldValidators(data interface{}) map[string][]string { v := reflect.ValueOf(data) t := reflect.TypeOf(data) validators := make(map[string][]string) for i := 0; i \u0026lt; v.NumField(); i++ { validators[strings.ToLower(v.Type().Field(i).Name)] = []string{t.Field(i).Tag.Get(\u0026#34;validate\u0026#34;)} } return validators } func main() { for k, v := range GetStructFieldValidators(Profile{}){ fmt.Println(k, v) } } sex [required] maritalstatus [required] children [numeric] id [numeric] first [required] last [required] birth [required] "});index.add({'id':17,'href':'/notes/go_defer/','title':"Go defer",'section':"Index",'content':" tags Go Programming Programming   import \u0026#34;fmt\u0026#34; func trace(name string) string { fmt.Println(\u0026#34;Entering \u0026#34;, name) return name } func un(name string) string { fmt.Println(\u0026#34;Exiting\u0026#34;, name) return name } func a() { defer un(trace(\u0026#34;a\u0026#34;)) fmt.Println(\u0026#34;Hello, world\u0026#34;) } func b(){ defer un(trace(\u0026#34;b\u0026#34;)) fmt.Println(\u0026#34;Before i \u0026lt; 10 loop\u0026#34;) for i:=0 ; i \u0026lt; 10; i++{ defer fmt.Println(\u0026#34;i =\u0026#34;, i) } fmt.Println(\u0026#34;After i \u0026lt; 10 loop\u0026#34;) } func main(){ a() b() } Entering a Hello, world Exiting a Entering b Before i \u0026lt; 10 loop After i \u0026lt; 10 loop i = 9 i = 8 i = 7 i = 6 i = 5 i = 4 i = 3 i = 2 i = 1 i = 0 Exiting b "});index.add({'id':18,'href':'/notes/antifa/','title':"Antifa",'section':"Index",'content':" tags Politics  HOLD Antifa: The Anti-Fascist Handbook #  Table 1: Clock summary at [2020-06-15 Mon 09:11]     Headline Time     Total time 0:00    :BOOK_CATEGORY: politics :BOOK_AUTHORS: Mark Bray :START_DATE: nil :END_DATE: nil :URL: https://www.amazon.com.br/Antifa-Anti-Fascist-Handbook-Mark-Bray/dp/1612197035\n"});index.add({'id':19,'href':'/notes/weed/','title':"Weed",'section':"Index",'content':" tags Politics  Selling weed literally went from major felony to essential business (open during pandemic) in much of America \u0026amp; yet many are still in prison. Doesn’t make sense, isn’t right.\n\u0026mdash; Elon Musk (@elonmusk) June 6, 2020  "});index.add({'id':20,'href':'/notes/org_roam/','title':"Org-roam",'section':"Index",'content':"Backlinks #   Org-roam export backlinks on Hugo Org-roam Firefox bookmark Ox-hugo export all roam to Hugo   tags Org-mode Emacs  "});index.add({'id':21,'href':'/notes/ox_hugo_export_all_roam_to_hugo/','title':"Ox-hugo export all roam to Hugo",'section':"Index",'content':" tags Emacs Org-mode Org-roam  Export all org-roam files to Hugo markdown (this might take some time)\nFrom: jethrokuan/dots\n(defun benmezger/org-roam-export-all () \u0026#34;Re-exports all Org-roam files to Hugo markdown.\u0026#34; (interactive) (dolist (f (org-roam--list-all-files)) (with-current-buffer (find-file f) (when (s-contains? \u0026#34;SETUPFILE\u0026#34; (buffer-string)) (org-hugo-export-wim-to-md))))) Adding an empty #+SETUPFILE: forces benmezger/org-roam-export-all to export the file.\n"});index.add({'id':22,'href':'/notes/emacs-editor/','title':"Emacs",'section':"Index",'content':"Backlinks #   Org-roam export backlinks on Hugo Org-roam Org-roam Firefox bookmark Org-mode Firefox bookmarks Ox-hugo export all roam to Hugo Using macros in Emacs A brief introduction to Emacs Lisp for people with programming background | lgmoneda  "});index.add({'id':23,'href':'/notes/org_mode/','title':"Org-mode",'section':"Index",'content':"Backlinks #   Org-roam export backlinks on Hugo Org-roam Org-roam Firefox bookmark Org-mode Firefox bookmarks Ox-hugo export all roam to Hugo  "});index.add({'id':24,'href':'/notes/org_roam_export_backlinks_on_hugo/','title':"Org-roam export backlinks on Hugo",'section':"Index",'content':" tags Org-mode Emacs Org-roam  Insert roam backlinks URL when exporting orgmode to HTML\nFrom: jethrokuan/dots\n(defun benmezger/org-roam-export-all () \u0026#34;Re-exports all Org-roam files to Hugo markdown.\u0026#34; (interactive) (dolist (f (org-roam--list-all-files)) (with-current-buffer (find-file f) (when (s-contains? \u0026#34;SETUPFILE\u0026#34; (buffer-string)) (org-hugo-export-wim-to-md))))) (defun benmezger/org-roam--backlinks-list (file) (when (org-roam--org-roam-file-p file) (mapcar #\u0026#39;car (org-roam-db-query [:select :distinct [from] :from links :where (= to $s1) :and from :not :like $s2] file \u0026#34;%private%\u0026#34;)))) (defun benmezger/org-export-preprocessor (_backend) (when-let ((links (benmezger/org-roam--backlinks-list (buffer-file-name)))) (insert \u0026#34;\\n** Backlinks\\n\u0026#34;) (dolist (link links) (insert (format \u0026#34;- [[file:%s][%s]]\\n\u0026#34; (file-relative-name link org-roam-directory) (org-roam--get-title-or-slug link)))))) (add-hook \u0026#39;org-export-before-processing-hook #benmezger/org-export-preprocessor)) "});index.add({'id':25,'href':'/notes/communication/','title':"Communication",'section':"Index",'content':"Backlinks #   Nonviolent communication: A language for life  "});index.add({'id':26,'href':'/notes/politics/','title':"Politics",'section':"Index",'content':"Backlinks #   Kommunistische Partei Deutschlands (KPD) The Communist Manifesto Na batalha contra o coronavirus, faltam lideres a humanidade Media Weed Abortion Antifa  "});index.add({'id':27,'href':'/notes/c-coding-theory/','title':"Coding Theory",'section':"Index",'content':" tags Information Theory Computer Science Programming  Related video: https://www.khanacademy.org/computing/computer-science/informationtheory/info-theory/v/source-encoding-language-of-coins-4-9\nSource encoding #  Say Alice and Bob want to communicate with each other over some cable. They both live far from each other, so they decided to run a wire between both of their houses. Their communication has been working fine until winter. When winter arrived, lots wind noise started to happen and they are unable to communicate with each other over their cable communication system. With the wind, it becomes impossible to hear the signal over the noise.\nBob then encodes the message using plucks instead of voice. Plucks generate a much higher noise, so it\u0026rsquo;s much better to hear on the other side, however, how can Bob encode the message as plucks?\nDiscrete source #  The discrete source is a selection of a finite number of symbols. Say we have 2 common dice (6 possible numbers in each dice), totaling 12 possible numbers.\n   Dice A Dice B     1 1   2 2   3 3   4 4   5 5   6 6    If Bob wants to send the result of rolled dice A with a result of 4, he could send 4 plucks, or the result of 12 (dice A + B), that would be 12 plucks. This may seem OK up to a certain point, but as your numbers grew (max of 12 in this example), it may be harder to understand the signal, so the message needs to be sent slowly so the other end can understand. The rate (or capacity) is the amount of time it takes for each plug to be sent, for example, say number 2 (2 plucks) takes an average of 2 second per pluck, so 4 seconds in total.\n"});index.add({'id':28,'href':'/notes/code-snippets/','title':"Code snippets",'section':"Index",'content':"Backlinks #   Go reading struct tag Go interfaces List Foreign key constrants defined in a database   tags Programming Python  Python run HTTP server locally #  1  python -m http.server 8000 --bind 127.0.0.1   "});index.add({'id':29,'href':'/notes/binary-calculation/','title':"Binary calculation",'section':"Index",'content':" tags Math Computer Science Computer Architecture  The b before the code blocks mean binary number, to avoid confusion\nBinary Addition #  Possibilities #     A OP B \\=     1 + 1 10   1 + 0 1   0 + 1 1   0 + 0 0   1 + 1+1 11    Carry is involved whenever we have a result larger than bin 1\nBinary multiplication #  Possibilities #     A OP B \\=     0 * 0 0   1 * 0 0   1 ** 1 1    Binary subtraction #  Possibilities #     A OP B \\=     0 - 0 0   1 - 0 1   1 - 1 0   0 - 1 (borrow 1 from the next column 10 - 1) = 1)    "});index.add({'id':30,'href':'/notes/math/','title':"Math",'section':"Index",'content':"Backlinks #   Integral Calculus Binary calculation  "});index.add({'id':31,'href':'/notes/integral-calculus/','title':"Integral Calculus",'section':"Index",'content':" tags Math   These are the two ways we commonly think about definite integrals: they describe an accumulation of a quantity, so the entire definite integral gives us the net change in that quantity.1\n Why Integral Calculus #  Figure 1 represents 2 graphs of y = cos(x). Let\u0026rsquo;s say we would like to calculate the area of   \\( x\\_1 \\)  . We could calculate the area by aproximation, for example, Graph B is filled with the area we would like to calculate, so we could divide this area by equal sections of \\(\\Delta x_n\\) from a to b rectangles, then we could calculate the area of these rectangles by \\(f(x_i) * \\Delta x_n\\) where \\(f\\) is the area of each of the rectangles. We do this for each rectangle then sum them up: \\(\\sum_{i=1}^n f(x_i) * \\Delta x_n\\). This will give us an approximation of our area, we could have a better approximation by having our \\(\\Delta x_n\\) smaller, but this implies that our n becomes bigger and bigger. The smaller \\(\\Delta x_n\\) gets, the more n approaches infinity.\nWe could use \\(\\liminf\\) of n as n approaches ∞ or \\(\\Delta x_n\\) as it gets very small.\nset multiplot layout 1, 2 title \u0026#34;f(x) = -x ** 2 + 4\u0026#34; set terminal pngcairo enhanced color size 350,262 font \u0026#34;Verdana,10\u0026#34; persist set linetype 1 lc rgb \u0026#39;#A3001E\u0026#39; set style fill transparent solid 0.35 noborder f(x) = -x ** 2 + 4 set title \u0026#34;A\u0026#34; plot f(x) with lines linestyle 1 set title \u0026#34;B\u0026#34; set style fill transparent solid 0.50 noborder plot f(x) fs solid 0.3 lc rgb \u0026#39;#A3001E\u0026#39; unset multiplot \n  The idea of getting better and better approximations is the what constitutes Integral Calculus.\n  : Source: Exploring accumulation of change \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':32,'href':'/notes/python/','title':"Python",'section':"Index",'content':"Backlinks #   Code snippets Python Async Python temporary file Compiler Go Programming   tags Computer Science Programming  "});index.add({'id':33,'href':'/notes/compiler/','title':"Compiler",'section':"Index",'content':" tags Computer Science Programming  Syntax Analysis #  Syntax analysis happens after the Lexical phase, and it is responsible for detecting syntax errors.\nGrammar #  Be design, computer languages have defined structure of what constitutes a valid program. in Python, a program is made up of functions/classes/imports, a function requires declarations and/or statements and so on. In C, a valid program needs to have a least a function called main, otherwise the GNU\u0026rsquo;s linker is unable to link the program.\nProgrammers may define language grammars using the Backus-Naur Form (BNF) notation. Defining grammars offer a lot of benefits for the language designer. Like code, language grammars may change overtime. For example, one of Python\u0026rsquo;s 3.5 new feature was the support to coroutines with async and await syntax.\nThe following diff shows some of the changes the developer needed to add support for the async before the function definition or allow an async function definition to be used as a decorator.\ndiff -r ccac513ee610 Grammar/Grammar --- a/Grammar/Grammar\tMon Apr 20 21:05:23 2015 +0200 +++ b/Grammar/Grammar\tMon Apr 20 15:54:06 2015 -0400 @@ -21,8 +21,11 @@  decorator: \u0026#39;@\u0026#39; dotted_name [ \u0026#39;(\u0026#39; [arglist] \u0026#39;)\u0026#39; ] NEWLINE decorators: decorator+ -decorated: decorators (classdef | funcdef) -funcdef: \u0026#39;def\u0026#39; NAME parameters [\u0026#39;-\u0026gt;\u0026#39; test] \u0026#39;:\u0026#39; suite +decorated: decorators (classdef | funcdef | async_funcdef) + +async_funcdef: ASYNC funcdef +funcdef: (\u0026#39;def\u0026#39; NAME parameters [\u0026#39;-\u0026gt;\u0026#39; test] \u0026#39;:\u0026#39; suite) +  parameters: \u0026#39;(\u0026#39; [typedargslist] \u0026#39;)\u0026#39; typedargslist: (tfpdef [\u0026#39;=\u0026#39; test] (\u0026#39;,\u0026#39; tfpdef [\u0026#39;=\u0026#39; test])* [\u0026#39;,\u0026#39; [\u0026#39;*\u0026#39; [tfpdef] (\u0026#39;,\u0026#39; tfpdef [\u0026#39;=\u0026#39; test])* [\u0026#39;,\u0026#39; \u0026#39;**\u0026#39; tfpdef] | \u0026#39;**\u0026#39; tfpdef]] @@ -37,18 +40,19 @@  simple_stmt: small_stmt (\u0026#39;;\u0026#39; small_stmt)* [\u0026#39;;\u0026#39;] NEWLINE small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | nonlocal_stmt | assert_stmt) Other than making it easier for the language designer to design the language, it allows the grammar to be easily documented and maintained by other language designers.\nSome grammars allow parsers (syntax analyzers) to be constructed to determine the syntactic structure of the program. By relying on the structured grammar, it allows the parsers to be developed more easily and testable.\nTypes of parsers #  There are 3 types of parsers we can use to write a syntax parser.\n Universal: this method can parse any grammar Top-down: this method builds parse trees from the top (root) to the button (leaves) Bottom-up: this method builds parse trees from the button (leaves) to the top (root)  The last two methods reads the input from left to right and one symbol at a time.\nThe top-down and bottom-up are known to be more efficient in production use1.\n  I am not really sure why this is, as I haven\u0026rsquo;t studied Universal methods] \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':34,'href':'/notes/computer-architecture/','title':"Computer Architecture",'section':"Index",'content':"Backlinks #   Postgres Clean code Clean architecture The Pragmatic programmer: from journeyman to master Binary calculation RISCV  "});index.add({'id':35,'href':'/notes/riscv/','title':"RISCV",'section':"Index",'content':"Backlinks #   RISCV   tags Computer Science Operating Systems Computer Architecture  Understanding RISCV stack pointer #  L06 RISCV Functions(6up).pdf #  Exceptions #  Exception are unusual condition occurring at run time associated with an instruction in the current RISCV thread. Exceptions may be converted to traps, but that all depends on the execution environment.\nTraps #  Trap refers to the synchronous transfer control to a trap handler caused by an exceptional condition occurring within a RISC thread. Trap handlers normally execute in a more privilege environment.\nInterrupts #  Interrupt refers to an external event that occurs asynchronously to the current RISCV thread. When an interrupt occurs, some instruction gets selected to receive an interrupt exception and subsequently experiences a trap.\nThe Machine trap vector base-address register (mtvec) #  When something happens in RISCV, the CPU calls the function stored in mtvec. mtvec is a XLEN (32-64bit wide) read/write register that holds a trap vector configuration which consists of the base address (the function address) and the vector mode.\nRISCV requires mtvec to be always implemented, but can contain a hardwired to a read-only value. The base field must always be aligned on a 4-byte boundary however, mode settings may impose additional base field alignment constraints.\nWe can visualize this as an array for XLEN bits:\n/* xlen is 32-bits ie. (int32_t) or 64-bits ie. (int64_t) */ xlen mtvec[xlen]; xlen base = mtvec[xlen-2]; xlen mode = mtvec[2]; If mode gets set to DIRECT MODE, it means all traps will go to the exact same function, if VECTOR mode is set, all synchronous exceptions into machine mode cause the PC to be set to the address of the base field, whereas interrupts will set PC to base + 4 * cause. For example Table 1 has machine-mode timer interrupt code 7 causes the PC to be set to BASE + 0x1c (BASE + 4 * 7).\n\n   Interrupt1 Exception code Reason     1 0 User software interrupt   1 1 Supervisor software interrupt   1 2 Reserved   1 3 Machine software interrupt   1 4 User timer interrupt   1 5 Supervisor timer interrupt   1 6 Reserved   1 7 Machine timer interrupt   1 8 User external interrupt   1 9 Supervisor external interrupt   1 10 Reserved   1 11 Machine external interrupt   1 \u0026gt;= 12 Reserved   0 0 Instruction address misaligned   0 1 Instruction access fault   0 2 Illegal instruction   0 3 Breakpoint   0 4 Load address misaligned   0 5 Load access fault   0 6 Store/AMO address misaligned   0 7 Store/AMO access fault   0 8 Environment call from U-mode   0 9 Environment call from S-mode   0 10 Reserved   0 11 Environment call from M-mode   0 12 Instruction page fault   0 13 Load page fault   0 14 Reserved   0 15 Store/AMO page fault   0 \u0026gt;= 16 Reserved    Privilege modes #     Level Encoding Name Abbreviation     0 00 User/Application U   1 01 Supervisor S   2 10 Reserved    3 11 Machine M    Provides protection between different components of the software stack #  Any attempts to perform an operation not allowed by the current mode will cause an exception to be raised #  These exceptions will normally cause traps into the underlying execution environment #  Machine mode #  Highest privilege #  Mandatory privilege level for RISC-V hardware platform #  Trusted code environment #  Low level access to the machine implementation #  Manage secure execution environments #  User mode and supervisor mode are indented for conventional application and operating systems #     Number of levels Supported modes Indented Usage     1 M Simple embedded systems   2 M, U Secure embedded systems   3 M, S U Unix-like operating systems    Exceptions #  Any attempts to access non-existent CSR, read or write a read-only register raises an illegal instruction #  A read/write register might also contain bits that are read-only, in which writes to read-only bits are ignored #  Supervisor mode #  http://www-inst.eecs.berkeley.edu/~cs152/sp12/handouts/riscv-supervisor.pdf\nSteps to reproduce the behavior #  Switch to machine mode (if not already by default) #    0 for asynchronous and 1 for synchronous \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':36,'href':'/notes/thesis/','title':"Thesis",'section':"Index",'content':"Backlinks #   Operating Systems  "});index.add({'id':37,'href':'/notes/c-programming/','title':"C programming",'section':"Index",'content':" Tags Computer Science Programming  C project architecture guidelines #  Functions exposed in the header are like public methods #  Think of each module like a class. The functions you expose in the header are like public methods. Only put a function in the header if it part of the module\u0026rsquo;s needed interface.\nAvoiding circular module dependencies #  Avoid circular module dependencies. Module A and module B should not call each other. You can refactor something into a module C to avoid that.\nOperatins within the same module should have a create and delete function interface #  Again, following the C++ pattern, if you have a module that can perform the same operations on different instances of data, have a create and delete function in your interface that will return a pointer to struct that is passed back to other functions. But for the sake of encapsulation, return a void pointer in the public interface and cast to your struct inside of the module.\nAvoid module scope variables #  Avoid module-scope variables \u0026ndash; the previously described pattern will usually do what you need. But if you really need module-scope variables, group them under a struct stored in a single module-scope variable called \u0026ldquo;m\u0026rdquo; or something consistent. Then in your code whenever you see \u0026ldquo;m.variable\u0026rdquo; you will know at a glance it is one of the module-scope structs.\nDefine HEADER name to avoid double including and/or header problems #  To avoid header trouble, put #ifndef MY_HEADER_H #define MY_HEADER_H declaration that protects against double including. The header .h file for your module, should only contain #includes needed FOR THAT HEADER FILE. The module .c file can have more includes needed for the compiling the module, but don\u0026rsquo;t add those includes into the module header file. This will save you from a lot of namespace conflicts and order-of-include problems.\n"});index.add({'id':38,'href':'/notes/programming/','title':"Programming",'section':"Index",'content':"Backlinks #   Personal git workflow Methodologies Clean code Coding Theory Code snippets The Go Programming Language Specification - The Go Programming Language C programming Go reading struct tag Clean architecture The Pragmatic programmer: from journeyman to master Go defer Use case template Python Go interfaces Software Engineering Python Async Python temporary file Compiler Go Programming List Foreign key constrants defined in a database A brief introduction to Emacs Lisp for people with programming background | lgmoneda  "});index.add({'id':39,'href':'/notes/go-programming/','title':"Go Programming",'section':"Index",'content':"Backlinks #   The Go Programming Language Specification - The Go Programming Language Go reading struct tag Go defer Go interfaces   tags Programming Computer Science  Related notes: Interesting Golang libraries\nPackages #  In Go, programs start running in package main. Package names are defined by the last element of the import path: import math/rand has files which begin with the package rand. Packages consists of a bunch of .go files.\nPackage identifiers (functions, variables, struct and other data), may be used in other packages, with a few exceptions. Go allows only exported identifiers to be called after the package import. An exported identifier is any identifier which the first character starts in UPPER CASE. Any identifier which starts with a lower case letter is not exported.\nExported identifiers can be thought of public and private we see in other languages. This approach allows us to separate public API by using upper case character from private logic.\nPrivate identifier within a package may be referenced within its package.\nFunctions #  A function can have 0 or more arguments. All arguments must be typed: x int, y int, when 2 or consecutives arguments share the same type, arguments may be defined as so: x, y int.\nFunctions can return 0 or more number of results: return x, y. Function return values may be named, and must be defined after the function declaraction and before the beginning {\nimport \u0026#34;fmt\u0026#34; func foobar(x, y int) (z int){ z = x * y return } func main(){ x := foobar(3, 3) // should return 9 \tfmt.Println(x) } 9 The empty return will return the z value. Named return values should be used to document the meaning of the return values. Named return values should be used on short functions, as named values in large functions may become confusing.\nArrays #  An array can be defined by [x]T of n values of type T. In GO, we cannot defined an array size dynamically on run time, thus the following will not work:\n\nimport \u0026#34;fmt\u0026#34; func array(size int) ([]int){ var arr[size]int for i := 0; i \u0026lt; size; i++ { arr[i] = i * 2 } return arr } func main(){ fmt.Println(array(10)) } But the following will work:\nimport \u0026#34;fmt\u0026#34; func array() ([10]int){ var arr[10]int for i := 0; i \u0026lt; 10; i++ { arr[i] = i * 2 } return arr } func main(){ fmt.Println(array()) } [0 2 4 6 8 10 12 14 16 18] Slices #  Slice expressions construct a substring or slice from a string, array, pointer to array, or slice.\nArrays are convenient but limiting. Sizes are fixed and no way of resizing. Go provides slices, which can be dynamically reallocated. Like Python, Go slices can be formed by specifying slices with a low and high bound:\nimport \u0026#34;fmt\u0026#34; func array() (*[10]int){ var arr[10]int for i := 0; i \u0026lt; 9; i++ { arr[i] = i * 2 } return \u0026amp;arr } func main(){ arr := array() fmt.Println(arr[0:5]) fmt.Println(arr[0:2]) /* https://golang.org/ref/spec#Address_operators */ arr1 := array()[0:5] x := arr1[1:2] x[0] = -1 fmt.Println(arr1, x) } Slices are references to arrays #  A slice describes a section of an underlying array, it does not store any data. If X is an array and Y a slice of x[0:1], changing index 0 will change all the value of slices that share the same underlying array.\nimport \u0026#34;fmt\u0026#34; func main() { x := [6]int {1, 2, 3, 4, 5, 6} y := x[0:2] fmt.Println(y, x) y[0] = 10 fmt.Println(y, x) } Length and capacity #  A slice has a capacity and length. The length is the number of elements the current slice has, and the capacity is the number of elements the underlying slice has counting from the first element of the slice\nimport \u0026#34;fmt\u0026#34; func main() { slice := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} fmt.Printf(\u0026#34;Slice: %v\\n\u0026#34;, slice) fmt.Printf(\u0026#34;Cap of slice (%p): %d\\n\u0026#34;, slice, cap(slice)) fmt.Printf(\u0026#34;Len of slice (%p): %d\\n\u0026#34;, slice, len(slice)) subslice := slice[0:5] fmt.Printf(\u0026#34;Cap of slice (%p): %d\\n\u0026#34;, subslice, cap(subslice)) fmt.Printf(\u0026#34;Len of slice (%p): %d\\n\u0026#34;, subslice, len(subslice)) /* extend subslice */ extended := subslice[:10] fmt.Printf(\u0026#34;Cap of slice (%p): %d\\n\u0026#34;, extended, cap(extended)) fmt.Printf(\u0026#34;Len of slice (%p): %d\\n\u0026#34;, extended, len(extended)) shrink := subslice[:2] fmt.Printf(\u0026#34;Cap of slice (%p): %d\\n\u0026#34;, shrink, cap(shrink)) fmt.Printf(\u0026#34;Len of slice (%p): %d\\n\u0026#34;, shrink, len(shrink)) // drop first 2 items \tsubslice = subslice[2:] fmt.Printf(\u0026#34;Cap of slice (%p): %d\\n\u0026#34;, subslice, cap(subslice)) fmt.Printf(\u0026#34;Len of slice (%p): %d\\n\u0026#34;, subslice, len(subslice)) fmt.Printf(\u0026#34;slice: %v\\n\u0026#34;, slice) fmt.Printf(\u0026#34;subslice: %v\\n\u0026#34;, subslice) fmt.Printf(\u0026#34;extended: %v\\n\u0026#34;, extended) fmt.Printf(\u0026#34;shrink: %v\\n\u0026#34;, shrink) } CURRENT Creating dynamically-sized slices #  Dynamically-sized slices can be created with make\nimport \u0026#34;fmt\u0026#34; func main(){ arr := make([]string, 5) /* slice of strings of length 5 */ fmt.Printf(\u0026#34;Cap: %d, Len: %d, %v\u0026#34;, cap(arr), len(arr), arr) arr[0] = \u0026#34;Hello, world\u0026#34; fmt.Println(arr) } "});index.add({'id':40,'href':'/notes/computer-science/','title':"Computer Science",'section':"Index",'content':"Backlinks #   Information Theory Postgres Clean code Coding Theory C programming Operating Systems Clean architecture The Pragmatic programmer: from journeyman to master Operating systems: Internals and design principles (9th edition) Use case template Python Binary calculation Software Engineering Compiler RISCV Go Programming Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World  "});index.add({'id':41,'href':'/notes/operating-systems/','title':"Operating Systems",'section':"Index",'content':"Backlinks #   Operating systems: Internals and design principles (9th edition) RISCV   tags Thesis Computer Science  OS Kit #  The OSKit is a framework and a set of 34 component libraries oriented to operating systems, together with extensive documentation. By providing in a modular way not only most of the infrastructure \u0026ldquo;grunge\u0026rdquo; needed by an OS, but also many higher-level components, the OSKit\u0026rsquo;s goal is to lower the barrier to entry to OS R\u0026amp;D and to lower its costs. The OSKit makes it vastly easier to create a new OS, port an existing OS to the x86 (or in the future, to other architectures supported by the OSkit), or enhance an OS to support a wider range of devices, file system formats, executable formats, or network services. The OSKit also works well for constructing OS-related programs, such as boot loaders or OS-level servers atop a microkernel\nMemory management #  Parkinson\u0026rsquo;s law #  Programs and their data expand to fill the memory available to hold them\nMemory hierarchy #  Small fast and expensive memory up to a very slow and cheap memory #    Processor registers    Processor cache    Random access memory (RAM)    Flash/USB memory    Hard drive    Tape backups  The part that handles memory in the operating system is called memory manager #    The manager should be capable of allocating/deallocating memory for processes    Keep track of which location in memory is in use  Lowest cache level is generally handled by the hardware #  Not having any memory abstraction at all is the simplest abstraction #  The simplest memory abstraction is to have no abstraction at all, that being said, the programmer sees all the memory and may read/write from anywhere, however, this implies one program is running, otherwise one program may interfere with the other\n   One solution for allowing two or more programs running\nsimultaneously is if one program knows about the existence of the other. With this approach, the programmer requires to divide memory into 2 \u0026ldquo;blocks\u0026rdquo;, and allocate each block to the corresponding program, for example, the kernel may be at the button of memory and the program on top of it. It\u0026rsquo;s worth noting this implies the program may wipe (or read/write) the kernel address\n    Another solution is to store the kernel in ROM, and keep the program in RAM     When the kernel needs to switch process, it will load the the\nprogram from disk and overwrite the current running program\n     All the kernel needs to do is save the memory context to disk and\nload the new program\n     With the help of extra hardware, it is possible to divide memory\ninto blocks and protect other programs from accessing blocks of other programs loaded in memory\n   This brings a problem since programs may move data from physical\nmemory, say program A jumps to address `0x12` and program b copies data from in memory address `0x12`. When program A jumps to address `0x12` it would instead crash, since that was not the expected address. The problem is that both programs reference physical memory and this is totally undesirable, what is desirable is that programs reference a private set of local address to it\nSee: https://imgur.com/a/5FlWN4A\n     Static relocation: modify the second program on the fly as\nit loaded into memory (IBM 360 did this)\n    The operating system should coordinate on how these memories are handled #     It should handle:\n  Keep track which parts of memory are in used and which aren\u0026rsquo;t    Allocate and deallocate memory    Swapping between main memory to disk when main memory is too small to hold the process    Memory abstractions #     Address spaces\n  Allows multiple applications to be in memory at the same time    Prevents applications from interfering with each other    Abstract memory for programs to be stored in     Works like a telephone number\nin Brazil, it is common for local cities to have a 8-digit phone number, so the address space for the telephone number starts in 0000,0000 up to 9999,9999.\n       Stack pointer\n   RISC-V ABI\u0026rsquo;s stack pointer\nThe stack pointer points to the next available memory location on the stack, and the frame pointer points to the base of the stack frame.\n    Physical Memory management #  Direct memory address to access a real location in RAM #  Code #  Linux trap handler #  void __init trap_init(void) { /* * Set sup0 scratch register to 0, indicating to exception vector * that we are presently executing in the kernel */ csr_write(CSR_SCRATCH, 0); /* Set the exception vector address */ csr_write(CSR_TVEC, \u0026amp;handle_exception); /* Enable all interrupts */ csr_write(CSR_IE, -1); } Send S-mode interrupts and most exceptions to S-mode #  // send S-mode interrupts and most exceptions straight to S-mode static void delegate_traps() { if (!supports_extension(\u0026#39;S\u0026#39;)) return; uintptr_t interrupts = MIP_SSIP | MIP_STIP | MIP_SEIP; uintptr_t exceptions = (1U \u0026lt;\u0026lt; CAUSE_MISALIGNED_FETCH) | (1U \u0026lt;\u0026lt; CAUSE_FETCH_PAGE_FAULT) | (1U \u0026lt;\u0026lt; CAUSE_BREAKPOINT) | (1U \u0026lt;\u0026lt; CAUSE_LOAD_PAGE_FAULT) | (1U \u0026lt;\u0026lt; CAUSE_STORE_PAGE_FAULT) | (1U \u0026lt;\u0026lt; CAUSE_USER_ECALL); write_csr(mideleg, interrupts); write_csr(medeleg, exceptions); assert(read_csr(mideleg) == interrupts); assert(read_csr(medeleg) == exceptions); } Timer interrupt in assembly #  https://forums.sifive.com/t/beginner-trying-to-set-up-timer-irq-in-assembler-how-to-print-csrs-in-gdb/2764 #  Freedom metal Interrupt #  Initialize CPU interrupt controller #  void __metal_driver_riscv_cpu_controller_interrupt_init( struct metal_interrupt *controller) { struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller); uintptr_t val; if (!intc-\u0026gt;init_done) { /* Disable and clear all interrupt sources */ asm volatile(\u0026#34;csrc mie, %0\u0026#34; ::\u0026#34;r\u0026#34;(-1)); asm volatile(\u0026#34;csrc mip, %0\u0026#34; ::\u0026#34;r\u0026#34;(-1)); /* Read the misa CSR to determine if the delegation registers exist */ uintptr_t misa; asm volatile(\u0026#34;csrr %0, misa\u0026#34; : \u0026#34;=r\u0026#34;(misa)); /* The delegation CSRs exist if user mode interrupts (N extension) or * supervisor mode (S extension) are supported */ if ((misa \u0026amp; METAL_ISA_N_EXTENSIONS) || (misa \u0026amp; METAL_ISA_S_EXTENSIONS)) { /* Disable interrupt and exception delegation */ asm volatile(\u0026#34;csrc mideleg, %0\u0026#34; ::\u0026#34;r\u0026#34;(-1)); asm volatile(\u0026#34;csrc medeleg, %0\u0026#34; ::\u0026#34;r\u0026#34;(-1)); } /* The satp CSR exists if supervisor mode (S extension) is supported */ if (misa \u0026amp; METAL_ISA_S_EXTENSIONS) { /* Clear the entire CSR to make sure that satp.MODE = 0 */ asm volatile(\u0026#34;csrc satp, %0\u0026#34; ::\u0026#34;r\u0026#34;(-1)); } /* Default to use direct interrupt, setup sw cb table*/ for (int i = 0; i \u0026lt; METAL_MAX_MI; i++) { intc-\u0026gt;metal_int_table[i].handler = NULL; intc-\u0026gt;metal_int_table[i].sub_int = NULL; intc-\u0026gt;metal_int_table[i].exint_data = NULL; } for (int i = 0; i \u0026lt; METAL_MAX_ME; i++) { intc-\u0026gt;metal_exception_table[i] = __metal_default_exception_handler; } __metal_controller_interrupt_vector(METAL_DIRECT_MODE, \u0026amp;__metal_exception_handler); asm volatile(\u0026#34;csrr %0, misa\u0026#34; : \u0026#34;=r\u0026#34;(val)); if (val \u0026amp; (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) { /* Floating point architecture, so turn on FP register saving*/ asm volatile(\u0026#34;csrr %0, mstatus\u0026#34; : \u0026#34;=r\u0026#34;(val)); asm volatile(\u0026#34;csrw mstatus, %0\u0026#34; ::\u0026#34;r\u0026#34;(val | METAL_MSTATUS_FS_INIT)); } intc-\u0026gt;init_done = 1; } } Set trap vector configuration #  void __metal_controller_interrupt_vector(metal_vector_mode mode, void *vec_table) { uintptr_t trap_entry, val; asm volatile(\u0026#34;csrr %0, mtvec\u0026#34; : \u0026#34;=r\u0026#34;(val)); val \u0026amp;= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED); trap_entry = (uintptr_t)vec_table; switch (mode) { case METAL_SELECTIVE_VECTOR_MODE: asm volatile(\u0026#34;csrw mtvt, %0\u0026#34; ::\u0026#34;r\u0026#34;(trap_entry | METAL_MTVEC_CLIC)); asm volatile(\u0026#34;csrw mtvec, %0\u0026#34; ::\u0026#34;r\u0026#34;(val | METAL_MTVEC_CLIC)); break; case METAL_HARDWARE_VECTOR_MODE: asm volatile(\u0026#34;csrw mtvt, %0\u0026#34; ::\u0026#34;r\u0026#34;(trap_entry | METAL_MTVEC_CLIC_VECTORED)); asm volatile(\u0026#34;csrw mtvec, %0\u0026#34; ::\u0026#34;r\u0026#34;(val | METAL_MTVEC_CLIC_VECTORED)); break; case METAL_VECTOR_MODE: asm volatile(\u0026#34;csrw mtvec, %0\u0026#34; ::\u0026#34;r\u0026#34;(trap_entry | METAL_MTVEC_VECTORED)); break; case METAL_DIRECT_MODE: asm volatile( \u0026#34;csrw mtvec, %0\u0026#34; ::\u0026#34;r\u0026#34;(trap_entry \u0026amp; ~METAL_MTVEC_CLIC_VECTORED)); break; } } For DIRECT_ACCESS interrupt vector configuration #  "});index.add({'id':42,'href':'/notes/socratic-questioning/','title':"Socratic questioning",'section':"Index",'content':"Backlinks #   Thinking methods   tags Thinking methods Mindset Mental models Learning  Socratic questioning is one of many Mental models allows us to pursue thoughts in many directions and establish first principles through strict analysis. It allows us to establish truth and separate knowledge from ignorance by reveling underlying assumptions. The method allows us to explore complex ideas and find the truth out of things while opening up issues and problems.\nKey principles of the method #   Identifying principles of thinking and cut through dogma and shared belief Open up issues and problems Explore complex ideas and find the truth out of things Reveals underlying assumptions Separates knowledge from ignorance Uses to establish truth Establish first principles through strict analysis Pursue thoughts in many direction  Using the process #   Clarify your thinking and explaining the origins of your idea  Why do I think this? What exactly do I think?   Questioning the original question  Why did I think that? Was I correct? What conclusions can I draw from the reasoning process?   Challenging assumptions  How do I know this is true? What if you think the other way around?   Looking for evidence  How can I back this up? Is there any research made on this? What are the sources?   Consider alternative perspectives  What might others think? How do I know I am correct?   Examining consequences and implications  What if I am wrong? What are the implications and consequences if I am wrong?    "});index.add({'id':43,'href':'/notes/mental-models/','title':"Mental models",'section':"Index",'content':"Backlinks #   Thinking methods The great mental models: General thinking concepts Socratic questioning   tags Thinking methods Mindset Learning   « You only think you know, as a matter of fact. And most of your actions are based on incomplete knowledge and you really don’t know what it is all about, or what the purpose of the world is, or know a great deal of other things. It is possible to live and not know. »\n\u0026ndash; Richard Feynman\nParrish, Shane. The Great Mental Models Volume 1: General Thinking Concepts (p. 12). Latticework Publishing Inc.. Kindle Edition.\n Mental models allows us to have a better understanding of the world around us, they shape on how we think and solve problems, shape opportunities and decisions, and allows us to simplify complex problems. Principles of field subjects can be mixed together to understand underlying key issues, points and ideas.\nMental models allows structure of information to be broken into pieces and link related information together. By applying mental models, we can move towards understanding reality.\nProblems can be broken into substantive parts so interconnections can be revealed.\nMost actions are based with incomplete knowledge of the subject, so mental models allows us to view what we know and what are we missing.\nRelated books:\n   Related books     Mindset   The great mental models: General thinking concepts   Nonviolent communication: A language for life    Blind spots #   The more we remove blind spots around situations, the more we can interact and move closer to understanding reality We think better when we remove blind spots  Broad latticework of mental models #   Chunks of knowledge from different disciplines Can be simplified Allows better understanding of the world Helps identifying information that is relevant to the current situation  Bottom-up perspective #   Expose what we believe to the casual relationships Exposes how they will govern the situation both now and in the future  Key points on mental models #   How we understand the world They shape on how we think and solve problems Shape opportunities and decisions How we simplify complexity Principles of subjects can be mixed together to understand underlying and key issues/points/ideas Representation on how something works  Representation on how something works Link related information to different structures   Allows moving towards understanding reality Helps finding a process to help us work through problems from multiple dimensions and perspectives Finding the right solution for the right problem  Problem thinking #   Break it down into substantive parts so the interconnection reveals them-self Key points on mental models  "});index.add({'id':44,'href':'/notes/mindset/','title':"Mindset",'section':"Index",'content':"Backlinks #   Nonviolent communication: A language for life Thinking methods Mental models The great mental models: General thinking concepts Socratic questioning  "});index.add({'id':45,'href':'/notes/learning/','title':"Learning",'section':"Index",'content':"Backlinks #   Nonviolent communication: A language for life Thinking methods Mental models The great mental models: General thinking concepts Socratic questioning  "});index.add({'id':46,'href':'/notes/thinking-methods/','title':"Thinking methods",'section':"Index",'content':"Backlinks #   Mental models The great mental models: General thinking concepts Socratic questioning   tags Learning Mindset Mental models  Thinking methods are techniques where we can get better at solving complex problems and having a clearer view of the problem. It allows us to thought experience and running towards reality instead of away from. Understanding must constantly be tested against reality and updated accordingly. We can break problems into sub-problems so we can better view reality.\nPrevents failure from interacting with reality\n\n  Figure 1: Mindmap of thinking methods\n  Related pages:\n Mental models Mindset Socratic questioning  "});index.add({'id':47,'href':'/notes/interesting-golang-libraries/','title':"Interesting Golang libraries",'section':"Index",'content':"Backlinks #    Go Programming\n  https://github.com/jmoiron/sqlx\n  https://pg.uptrace.dev/guide/\n  https://github.com/go-pg/pg\n  Entered on [2020-05-27 Wed 21:36]\n\u0026lt;~/workspace/commit-validator/requirements.txt\u0026gt;\n"});index.add({'id':48,'href':'/notes/reading-progress/','title':"Book progress",'section':"Index",'content':"Interesting reading: Quantifying Reading\nGoodreads book list: https://www.goodreads.com/review/list/75297054\nReading progress as of \u0026lt;2020-05-30 Sat\u0026gt;\nTable 1: Clock summary at [2020-07-13 Mon 08:07]     Tags Headline Time     ALL Total time 1d 11:52    File time 2:36   @books, reading, clock The Communist Manifesto 2:36    File time 11:23   reading, @books, clock The Pragmatic Programmer: From\u0026hellip; 11:23    File time 3:24   reading, @books, clock Operating Systems: Internals and\u0026hellip; 3:24    File time 3:28   reading, @books, toread, clock Clean Architecture 3:28    File time 5:48   read, @books, clock The Great Mental Models: General\u0026hellip; 5:48    File time 8:12   read, @books, clock Nonviolent Communication: A language\u0026hellip; 8:12    File time 1:01   reading, @books, clock Data and Reality: A Timeless\u0026hellip; 1:01    "});index.add({'id':49,'href':'/notes/abortion/','title':"Abortion",'section':"Index",'content':" tags Politics  Abortion should be legal, safe and rare\n"});index.add({'id':50,'href':'/notes/media/','title':"Media",'section':"Index",'content':" tags Politics  Mídia - Noam Chomsky #  Duas concepções diferentes de democracia #   Uma sociedade democrática é aquela em que o povo dispõe de  condições de participar de maneira significativa na condução de seus assuntos pessoais e na qual os canais de informação são acessíveis e livres\n O povo deve ser impedido de conduzir seus assuntos pessoais e os  canais de informação devem ser estreita e rigidamente controlados\n Essa é a concepção predominante Primeiras revoluções democráticas na Inglaterra do século XVII (17) expressam em grande medida esse ponto de vista  Primeira operação de propaganda governamental #  Governo de Woodrow Wilson #  [[https://dynalist.io/u/ZQA1dAc7Eut0bwSRwZeMRqQ0]]\nPresidente dos Estados Unidos em 1916 #     Plataforma \u0026ldquo;Paz sem Vitória\u0026rdquo;\n  Metade da Primeira Guerra Mundial    População bastante pacifista e sem motivo algum que justificasse envolvimento em guerra Europeia #  Constituída uma comissão de propaganda governamental #  ComissãoCreel #  https://dynalist.io/u/7sEyNdz3VqlLWY9GpIypishZ\n  Committee on Public Information    1917 - 1919     Transformou uma população dentro de 6 meses\nConseguiua dentro de 6 meses transformar uma população pacifista em uma população histérica e belicosa que queria destruir tudo que fosse alemão\n  Efeito importante que levou a outros efeitos    Após a guerra, forma utilizadas as mesmas técnicas para gerar um Pânico Vermelho #  Obteve êxito considerável na destruição de sindicatos e na eliminação de problemas perigosos como #    Liberdade de imprensa    Liberdade de pensamento político  Grande apoio dos lideres empresariais e da mídia #    Ambos organizaram e investiram muito na iniciativa  Intelectuais progressistas participaram ativamente #  Pessoas do circulo de JohnDewey #  https://dynalist.io/u/4O4qv1%5Fwmp2T5nHYLMIiMcDD\n"});index.add({'id':51,'href':'/notes/na-batalha-contra-o-coronavirus/','title':"Na batalha contra o coronavirus, faltam lideres a humanidade",'section':"Index",'content':" tags Politics  \u0026lt;2020-04-01 Wed 22:23\u0026gt; #  O verdadeiro antídoto para epidemias não é a segregação, mas a cooperação.\n\u0026lt;2020-04-01 Wed 22:28\u0026gt; #  Isso porque a melhor defesa que os humanos têm contra os patógenos não é o isolamento, mas a informação. A humanidade tem vencido a guerra contra as epidemias porque, na corrida armamentista entre patógenos e médicos, os patógenos dependem de mutações cegas, ao passo que os médicos se apoiam na análise científica da informação.\n\u0026lt;2020-04-01 Wed 22:30\u0026gt; #  De fato, quando uma multidão se junta para rezar, o resultado costuma ser infecção em massa.\n\u0026lt;2020-04-01 Wed 22:34\u0026gt; #  Em segundo lugar, a história indica que a proteção real vem da troca de informação científica confiável e da solidariedade global.\n\u0026lt;2020-04-01 Wed 22:35\u0026gt; #  Hoje, a China pode ensinar uma porção de lições importantes sobre o coronavírus para o mundo inteiro, mas isso demanda um alto nível de confiança e cooperação internacionais.\n\u0026lt;2020-04-01 Wed 22:35\u0026gt; #  A quarentena e o toque de recolher são essenciais para interromper a propagação da epidemia.\n\u0026lt;2020-04-01 Wed 22:36\u0026gt; #  A coisa mais importante que as pessoas precisam compreender sobre a natureza das epidemias talvez seja que sua propagação em qualquer país põe em risco toda a espécie humana.\n\u0026lt;2020-04-01 Wed 23:06\u0026gt; #  Na luta contra os vírus, a humanidade precisa vigiar suas fronteiras com cuidado. Mas não as fronteiras entre países. Precisa, antes, vigiar as fronteiras entre o mundo dos humanos e a esfera dos vírus.\n\u0026lt;2020-04-01 Wed 23:09\u0026gt; #  Há centenas de milhões de pessoas ao redor do mundo sem acesso aos serviços mais básicos de saúde. Isso representa um risco para todos nós. Estamos acostumados a pensar nesse tema em termos nacionais, no entanto oferecer assistência médica a iranianos e chineses também ajuda a proteger israelenses e americanos contra epidemias. Essa simples verdade deveria ser óbvia para todos, mas, infelizmente, ela escapa até mesmo a algumas das pessoas\n\u0026lt;2020-04-01 Wed 23:09\u0026gt; #  Há centenas de milhões de pessoas ao redor do mundo sem acesso aos serviços mais básicos de saúde. Isso representa um risco para todos nós. Estamos acostumados a pensar nesse tema em termos nacionais, no entanto oferecer assistência médica a iranianos e chineses também ajuda a proteger israelenses e americanos contra epidemias. Essa simples verdade deveria ser óbvia para todos, mas, infelizmente, ela escapa até mesmo a algumas das pess \u0026lt;2020-04-01 Wed 23:10\u0026gt; #  \u0026lt;2020-04-01 Wed 23:12\u0026gt; #  \u0026lt;2020-04-02 Thu 00:14\u0026gt; #  "});index.add({'id':52,'href':'/notes/alice-in-wonderland/','title':"Alice in wonderland: The complete collection",'section':"Index",'content':"\u0026lt;2020-03-07 Sat 03:33\u0026gt; #  Why, there’s hardly enough of me left to make one respectable person!”\n\u0026lt;2020-03-13 Fri 01:10\u0026gt; #  at least I know who I was when I got up this morning, but I think I must have been changed several times since then.’\n\u0026lt;2020-03-14 Sat 00:29\u0026gt; #  ‘they’re sure to kill it in a day or two: wouldn’t it be murder to leave it behind?’\n\u0026lt;2020-03-25 Wed 00:39\u0026gt; #  ‘In most gardens,’ the Tiger-lily said, ‘they make the beds too soft — so that the flowers are always asleep.’\n"});index.add({'id':53,'href':'/notes/non-violent-communication/','title':"Nonviolent communication: A language for life",'section':"Index",'content':"Backlinks #   Mental models   tags Mindset Learning Communication  READ Nonviolent Communication: A language for life #  Table 1: Clock summary at [2020-06-06 Sat 03:49]     Headline Time     Total time 8:12   Nonviolent Communication: A language\u0026hellip; 8:12    CLOSED: [2020-05-14 Thu 09:18]\n:BOOK_CATEGORY: psychology :BOOK_AUTHORS: Marshall B. Rosenberg :START_DATE: \u0026lt;2020-04-14 Tue\u0026gt; :END_DATE: \u0026lt;2020-05-14 Thu\u0026gt; :URL: https://www.goodreads.com/book/show/560861.Non%5FViolent%5FCommunication\n"});index.add({'id':54,'href':'/notes/the-great-mental-models/','title':"The great mental models: General thinking concepts",'section':"Index",'content':"Backlinks #   Mental models   tags Thinking methods Mental models Mindset Learning  READ The Great Mental Models: General Thinking Concepts #  "});index.add({'id':55,'href':'/notes/clean-code/','title':"Clean code",'section':"Index",'content':" tags Computer Science Programming Computer Architecture  NEXT Clean Code #  "});index.add({'id':56,'href':'/notes/clean-architecture/','title':"Clean architecture",'section':"Index",'content':" tags Computer Science Computer Architecture Programming  HOLD Clean Architecture #  "});index.add({'id':57,'href':'/notes/operating-systems/','title':"Operating systems: Internals and design principles (9th edition)",'section':"Index",'content':" tags Computer Science Operating Systems  READING Operating Systems: Internals and Design Principles (9th Edition) #  Table 1: Clock summary at [2020-06-06 Sat 03:47]     Headline Time     Total time 3:24   Operating Systems: Internals and\u0026hellip; 3:24    Exercises #  1.1. CPU: Takes care of processing data Main memory: Volatile memory for storing data and program instructions Secondary storage: Non-volatile for permantely storing data. I/O: External peripherals such as USB drive, printer and etc.\n1.2. Memory address register (MAR): specifies the memory address for the next read or write. Memory buffer register (MBR): contains data to be written to memory or receives data read from memory.\n1.3. Processor-memory: Data may be transferred from processor to memory or from memory to processor. Processor-IO: Process may transfer data to I/O module or from I/O module to processor Data processing: Processor may perform arithmetic or logical operation Control: The instruction may specify a different location to fetch the next instruction from, altering the sequence of execution.\n1.4. Interrupts the current execution of the CPU. This allows external peripherals to process data while the CPU works on something else. When the data processing is over, the peripheral may trigger an interrupt requesting CPU attention. A CPU interrupt handler may take care of interrupt or ignore it.\n1.5. There are two types of handling interrupts: sequentially or by priority-policy. In sequential interrupts, if an interrupt happens within the handler of a current interrupt, the interrupt will be ignored for the moment by setting a pending interrupt. After it the current interrupt has been dealt, it then treats the next pending interrupt. Priority-based interrupts allows one interrupt to be handled by priority. Whiling handling one interrupt, if another interrupt occurs and the priority is higher than the current interrupt being dealt, it stores the current context and handles the higher priority interrupt.\n1.6. Cost, speed, size are characteristics that are important\n   Notes\n   Program execution\nA program consists of a set of instructions stored in memory. The processor fetches one instruction at a time and executes each instruction. The processing required for one instruction is called the instruction cycle. The instruction cycle is composed of three main stages:\n Fetch stage: The process fetches an instruction from memory. Most processor hold some type of PC (Program counter) register which points to the next instruction in memory. Each time a new instruction has been fetched, the PC is incremented to the next instruction. The fetch stage usually consists of the following \u0026ldquo;substages\u0026rdquo;  Address of PC is copied to the MAR (Memory address register), which either stores the memory address from where data will be fetched or the address to which data will be sent or stored.        "});index.add({'id':58,'href':'/notes/the-pragmatic-programmer/','title':"The Pragmatic programmer: from journeyman to master",'section':"Index",'content':" tags Programming Computer Science Computer Architecture  READING The Pragmatic Programmer: From Journeyman to Master #  Table 1: Clock summary at [2020-06-23 Tue 09:01]     Headline Time     Total time 10:04   The Pragmatic Programmer: From\u0026hellip; 10:04    :BOOK_CATEGORY: Computer science, software architecture, software engineering :BOOK_AUTHORS: Andy Hunt, David Thomas :START_DATE: \u0026lt;2020-05-25 Mon\u0026gt; :END_DATE: nil :URL: https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X\n"});index.add({'id':59,'href':'/notes/communist-manifesto/','title':"The Communist Manifesto",'section':"Index",'content':" tags Politics  READING The Communist Manifesto #  Table 1: Clock summary at [2020-06-15 Mon 09:07]     Headline Time     Total time 2:36   The Communist Manifesto 2:36    :BOOK_CATEGORY: politics :BOOK_AUTHORS: Karl Marx, Friedrich Engels :START_DATE: \u0026lt;2020-05-25 Mon\u0026gt; :END_DATE: nil :URL: https://www.amazon.com/Communist-Manifesto-Karl-Marx/dp/1508475660\n"});index.add({'id':60,'href':'/notes/org-roam-firefox-bookmark/','title':"Org-roam Firefox bookmark",'section':"Index",'content':" tags Org-mode Emacs Org-roam  Org-roam has roam-protocol, which we can call throughout the system just like Org-mode Firefox bookmarks.\nOrg-roam protocol supports specifying the roam template to use. Template is the template key for a template in org-roam-capture-ref-templates. More documentation on the templating system can be found here.\nThese templates should contain a #+ROAM_KEY: ${ref} in it.\nRoam-ref protocol #  Find and creates from with a specific ROAM_KEY\njavascript:location.href = \u0026#39;org-protocol://roam-ref?template=r\u0026amp;ref=\u0026#39; + encodeURIComponent(location.href) + \u0026#39;\u0026amp;title=\u0026#39; + encodeURIComponent(document.title) Related link: https://org-roam.readthedocs.io/en/master/roam%5Fprotocol/\n"});index.add({'id':61,'href':'/notes/orgmode-firefox-bookmark/','title':"Org-mode Firefox bookmarks",'section':"Index",'content':"Backlinks #   Org-roam Firefox bookmark   tags Org-mode Emacs  Add the following scripts to call org-capture from Firefox\nCall capture template #  The following calls capture template key n\njavascript:location.href=\u0026#39;org-protocol://capture?template=n\u0026#39;+\u0026#39;\u0026amp;url=\u0026#39;+encodeURIComponent(window.location.href)+\u0026#39;\u0026amp;title=\u0026#39;+encodeURIComponent(document.title)+\u0026#39;\u0026amp;body=\u0026#39;+encodeURIComponent(window.getSelection()); Without a capture template #  If unspecified, the template key is set in the variable org-protocol-default-template-key. The following template placeholders are available:\n%:link The URL %:description The webpage title %:annotation Equivalent to [[%:link][%:description]] %i The selected text See: https:orgmode.org/manual/The-capture-protocol.html#The-capture-protocol\n"});index.add({'id':63,'href':'/notes/list-of-spotify-artists/','title':"List of Spotify artists",'section':"Index",'content':"   Artists     Lana Del Rey   Slipknot   CocoRosie   Papir   Jungbluth   Winds of Plague   Billy Talent   Russian Circles   Neversleep   Serj Tankian   Annotations Of An Autopsy   Circular   Hollywood Undead   Ocean of Grief   Rosetta   Darude   Mos Def   Amenra   The Game   POWERS   Keny Arkana   Cartola   The Stranglers   Armin van Buuren   Sting   Kavinsky   Snowmine   Linde Schöne   Molotov Solution   Skazi   Grave Miasma   Pathology   CHO   Klint   Mc João   Alpinist, Masakari   Mässmörd   Mano Brown   Passenger   Seu Jorge   Oliver Schories   Wolfbrigade   Tim Maia   Machine Head   La Gossa Sorda   Shpongle   Paul Kalkbrenner   Carpathian Forest   Impending Doom   Jonas Mantey   After The Burial   Calle 13   Opeth   Black Label Society   Ufomammut   Cássia Eller   Buena Vista Social Club   Muse   Weval   A$AP Rocky   Zero 7   Parkway Drive   XXXTENTACION   Uncle Acid \u0026amp; The Deadbeats   Gramatik   Hatebreed   CCCP – Fedeli Alla Linea   O Rappa   Tom Rosenthal   Johnny Preston   Emmure   Audialist   Motörhead   Ott   The Faceless   Bring Me The Horizon   The Kooks   Lady Gaga   Scann-Tec   Slayer   Lee DeWyze   Behemoth   Frank Sinatra   SBTRKT   RJD2   Air   Archive   Cigarettes After Sex   Aeuria   Kid Loco   Grupo Fundo De Quintal   Devendra Banhart   Dödsrit   2Pac   The Mamas \u0026amp; The Papas   The Blues Brothers   Alesana   Milky Chance   Dvne   DOWN   Mr. Catra   Mani   Tipper   Altarage   Sex Pistols   ZSK   Marcelo D2   Peter Joseph   YTCracker   Tribo da Periferia   Jpod   Suffokate   Dark Funeral   The Doors   Brokencyde   Post Malone   Arsonists Get All The Girls   Sarabante   Supercommuter   Thievery Corporation   Cage The Elephant   Yes-R   Britney Spears   Scorpions   Vintage Culture   DARKSIDE   Racionais MC\u0026rsquo;s   S.L.A.B.   Against Me!   Scars On Broadway   Keizer   Oasis   Bilderbuch   Deicide   Blind Witness   Miss May I   Nick Murphy / Chet Faker   Bob Marley \u0026amp; The Wailers   Cacife Clandestino   STRFKR   Marilyn Manson   Soviet Suprem   Kleerup   Downfall Of Gaia   Luiz Gonzaga   Extortion   Aspencat   Rage Against The Machine   Emicida   iwrestledabearonce   Esham   Moderat   Ska-P   Orishas   His Hero Is Gone   John Coltrane   See You Next Tuesday   Modeselektor   Marduk   Immortal   Zero Cult   Novos Baianos   Neutral Milk Hotel   1200 Micrograms   Dead by April   Puscifer   Kings of Leon   Mike Love   Tom Odell   DECASIA   SOJA   As I Lay Dying   Irie Révoltés   TOOL   Bad Religion   Metallica   Decibel   Wu-Tang Clan   Yung Buda   De Leve   Criolo   Carbon Based Lifeforms   Conjurer   Auroch   Nancy Sinatra   Burning The Masses   Lamb of God   Izah   Thriftworks   Despised Icon   Moby   Damian Marley   The Clash   Morrow   Lo-Pan   Mac DeMarco   Disturbed   Howling   Oranssi Pazuzu   alt-J   Heaven In Her Arms / Aussitot Mort   Intifada   Bezerra Da Silva   Sonic Boom Six   leon chang   Alaskan   Thy Art Is Murder   MC Guime   Kevcody   The xx   Weezer   Marconi Union   Planet Hemp   Kick Bong   Clear Conscience   Ultraje a Rigor   Kings of Convenience   Joy Division   Ação Direta   Angus MacRae   Louise Attaque   A Perfect Circle   laCasta   I Declare War   Big Brother \u0026amp; The Holding Company   Disfiguring The Goddess   As Blood Runs Black   Iron \u0026amp; Wine   Hymn   Ir Sais   Janis Joplin   Martyrdöd   NOFX   Chelsea Grin   Attila   Lost in Kiev   Fatboy Slim   King Conquer   Cruciamentum   Elza Soares   Hol Baumann   Adele   Deaf Radio   Abominable Putridity   Coldplay   Electric Wizard   De Dijk   The Prodigy   AWOLNATION   Carnifex   Mv Bill   Body Void   Oi Polloi   Queens of the Stone Age   Darvin   MC Cidinho   Nightmares On Wax   Daft Punk   DuvelDuvel   The Black Dahlia Murder   Insane Clown Posse   Fall Of Efrafa   Younger Brother   Glass Animals   Think of One   Joe Byrd \u0026amp; The Field Hippies   U2   Whitechapel   James Blake   Telefon Tel Aviv   Imagine Dragons   Haikaiss   Alceu Valença   Deep Purple   Bijou   Ratatat   René Osmanczyk   Gabriel O Pensador   Optimus Rhyme   Noorvik   Scott Bradlee\u0026rsquo;s Postmodern Jukebox   Lange Frans   Eiffel   Light Bearer   Job For A Cowboy   Areski Belkacem   Hallucinogen   The Offspring   Black Sabbath   The Police   Phaeleh   Asura   Art Of Burning Water   Victims   Stick Figure   Sonic Youth   Anopheli   Hundred Year Old Man   Bleed From Within   Jonna Fraser   Sabotage   System Of A Down   Fever Ray   Stromae   Hemelbestormer   Tycho   August Burns Red   Ali B   Gentleman   Rose Funeral   B.B. King   Bluetech   Ancst   Sacha Robotti   Martin Garrix   Soulfly   Young And In The Way   Animals As Leaders   Vomitory   The Who   Foals   Massive Attack   James Murray   Tragedy   Emancipator   Suicide Silence   Sepultura   Ventania.records   Hogni   Eric Clapton   Otto   Infected Mushroom   O Surto   Exaltasamba   Atomikylä   Rise Against   Toots \u0026amp; The Maytals   Chelsea Wolfe   Ozzy Osbourne   Dimmu Borgir   Black Pumas   The Digital Connection   Paul Jebanasam   Mano Negra   20syl   AES DANA   Cell   Lykke Li   Abstracter   Beirut   Falamansa   Chinese Man   Manu Chao   Rammstein   Rancid   AC/DC   Animosity   Childish Gambino   Motivés   Grift   Tom Day   Phantom Winter   MASTER BOOT RECORD   Oceano   Easily Embarrassed   Matt Corby   Cult Of Luna   1000mods   Ventania Banda Hippie   We Lost The Sea   All Shall Perish   Solar Fields   Decasia   Zefanio   Burzum   Arctic Monkeys   Zeca Baleiro   And Hell Followed With   Putridity   Blockhead   Juventude Maldita   Rappin\u0026rsquo; Hood   Stevie Nicks   Hef   Snoop Dogg   Bullet For My Valentine   Black Merda!   Buried Inside   Epic Mountain   Los Fastidios   Flux Pavilion   Alpinist   Johnny Hooker   blessthefall   Steinsopp   Sync24   Grupo Revelação   In The Hearts Of Emperors    "});index.add({'id':64,'href':'/notes/information_theory/','title':"Information Theory",'section':"Index",'content':"Backlinks #   Coding Theory   tags Computer Science  Related content: https://www.khanacademy.org/computing/computer-science/informationtheory/info-theory/\nHumans express themselves using a variations of communication, such as language, physical gestures, drawing and etc. Language allows us to take a thought and break it down to a series of chunks. These chunks are externalized using a series of signals or symbols. Informally we can think of information as some message, stored or transmitted using some medium.\nInformation is a collection of possible symbols. For example, the alphabet allows us to choose between symbols to create words within the current context. Everyday, we look for faster and efficient ways to transporting information across spaces.\nNo matter the type of information, all of them can be measured using a fundamental unit, just like measuring weights and heights with kilograms and centimeters.\nInformation can be measured and compared using a measurement called entropy. A page of a book doesn\u0026rsquo;t have the same weight (due to less information) than the complete book. We can weight information using the bit unit. No matter how the person wants to communicate the information, be music, computer code or drawings, each would contain the same number of bits though in different densities.\nKey contents: entropy; density, information\nWhat is the density of a bit? #  Bit density measures how many bits can be stored in some area or volume. As far as I\u0026rsquo;m aware there is no formal definition but you can get an informal idea from a few examples.\nA typed paper has some number of letters on it, let\u0026rsquo;s say 1000. Then a rough estimate for the bit density would be 1 KB per sheet of paper, assuming 1 byte per character. There could be many ways to increase the density, e.g. use a smaller font or use something more efficient than letters, like tiny squares that can either be on (black) or off (white). I\u0026rsquo;ve heard of software to back up information on paper that can store 500 KB per sheet.\nOn the other hand there are fingernail-sized microSD cards that can store 64 GB - a much higher bit density!\nGiven that a sheet of paper has an area of ~ 624 cm^2 that means its bit density is about 1 KB / 624 cm^2 = 0.0016 KB / cm^2. But a microSD card has an area of about 1.65 cm^2 so its bit density is about 64 GB / 1.65 cm^2 = 38.8 GB / cm^2. So, by this rough calculation the bit density of a microSD card is about 24,250,000 times greater than that of a sheet of paper.\nCURRENT Measuring information #  How can we quantify/measure an information source? Let\u0026rsquo;s say Alice and Bob live on the opposite road of each other and they want to communicate during the night. To easy the communication, Bob and Alice agreed on only using the set of symbols from the alphabet: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nAlice developed a simple encoder/decoder to use with their communication system. The encoder is responsible for translating a symbol to a binary digit, and the decoder is responsible for questioning the sender on which symbol it is. Alice sends a message to Bob with the symbol J. How many questions does Bob need to ask Alice on which symbol it is? There are 26 symbols\npackage main import \u0026#34;fmt\u0026#34; func alphabet(c chan string){ letters := \u0026#34;abcdefghijklmnopqrstunwxyz\u0026#34; for _, l := range letters { c \u0026lt;- string(l) } } func main(){ fmt.Println(\u0026#34;HERE\u0026#34;) letters := make(chan string, 26) alphabet(letters) for l := range(letters){ fmt.Println(l) } } "});index.add({'id':65,'href':'/posts/attaching-jira-issues-to-commits/','title':"Attaching Jira issues to commit",'section':"Posts",'content':"  TLDR ↕  Dynamically attach Jira attributes to commit body using git-hook. Check the project’s README.    The place I work at requires Jira story ID and task ID attached to the commit body. Initially, I was attaching the ID to the commit body manually, by checking either my previous commit or opening up the Jira board, however, after working some hours I was easily forgetting to attach the IDs to the commit and getting annoying having to either reword them and perhaps having to lookup Jira again.\nThis was tedious and frustrating, so I wrote a Git hook using pre-commit to handle and install the hook. Our workflow requires the task ID to be attached to the branch same, like so: SKYR-123_branch-description, so Jira is capable of logging commits related to task branches1. This makes it easy for the hook to know which task are you working on before writing to the commit body. As it checks whether you are in a task branch or any other branch. The Jira ID branch is configurable by specifying a regex for the Jira ID, like so: SKYR-\\d+.\nGit provides a pre-commit-msg hook, which prepares the default commit message before prompting the user for the commit description/body. To allow extensibility, the hook handles custom Git template with Jinja, so each project may have a custom commit template.\nFor example, the following template will write the task ID, story ID (if any) and task description.\nTask description: {{ summary }} Jira task ID: {{ key }} {% if parent__key %}Jira story ID: {{ parent__key }}{% endif %} The fields are related to Jira’s REST fields. Inner fields such as parent.key should replace the dot (.) with a double underscore (__).\nI named the project GJira , as of Git-Jira.\n  https://www.atlassian.com/blog/bitbucket/integration-tips-jira-software-bitbucket-server \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':66,'href':'/posts/http-hooks-with-custom-arguments/','title':"Patching requests HTTP hooks with custom arguments",'section':"Posts",'content':"I am working on a project where we have lots of functions integrated with external APIs. Functions where HTTP requests get dispatched, we log the current caller’s name, headers, and data (if any) in case we need to debug anything. For example:\nimport logging import requests LOGGER = logging.getLogger(\u0026#34;external\u0026#34;) def create_external_services(): ... LOGGER.info(f\u0026#34;[func] | Request {data}\u0026#34;) response = requests.post(\u0026#34;..\u0026#34;) LOGGER.info(f\u0026#34;[func] | Response {response.status_code} {response.text}\u0026#34;) ... def delete_external_services(): LOGGER.info(f\u0026#34;[func] | Request {data}\u0026#34;) response = requests.delete(\u0026#34;..\u0026#34;) LOGGER.info(f\u0026#34;[func] | Response {response.status_code} {response.text}\u0026#34;) So far so good, but it gets ugly when you have a bunch of functions logging HTTP one or multiple requests and responses.\nPython’s requests has a hook system that allows us to manipulate portions of the request process or signal event handling. However, the hook is unable to receive a custom argument. requests requires hooks to have the current argument definition of: def hook(response, *args, **kwargs), however, you are unable to pass custom kwargs to the hook as requests raises a TypeError if any kwarg is not recognized.\nThe way I solved this issue was by first creating a hook patch decorator.\nfrom typing import Callable import functools import logging def patch_http( logger: logging.Logger = None, level: int = logging.INFO, log_hook: Callable = log_hook, ) -\u0026gt; Callable: if logger is None: logger = logging.getLogger(\u0026#34;http.client\u0026#34;) def decorate_http(func): @functools.wraps(func) def log_wrapper(*args, **kwargs): # fake func and logger attribute to log_hook log_hook.func = func log_hook.logger = logger log_hook.level = level return func(*args, **kwargs) return log_wrapper return decorate_http This decorator decorates functions in which requests is used. It allows us to use a custom logger, log level, and log_hook function if required. log_wrapper creates 3 dummy attributes: func which holds the address of the caller, the logger, and the log level. The log_hook requires some hacking, as we might want to use it without the need of a decorated function.\ndef log_hook(req, *args, **kwargs): if not hasattr(log_hook, \u0026#34;func\u0026#34;): log_hook.func = None if not hasattr(log_hook, \u0026#34;logger\u0026#34;): setattr(log_hook, \u0026#34;logger\u0026#34;, logging.getLogger(\u0026#34;http.client\u0026#34;)) if not hasattr(log_hook, \u0026#34;level\u0026#34;): setattr(log_hook, \u0026#34;level\u0026#34;, logging.INFO) log_hook.logger.log( log_hook.level, \u0026#34;[{}] | Request | Payload: {}\u0026#34;.format( log_hook.func.__name__ if callable(log_hook.func) else \u0026#34;\u0026#34;, req.request.data if hasattr(req.request, \u0026#34;data\u0026#34;) else {}, ), ) log_hook.logger.log( log_hook.level, \u0026#34;[{}] | Response status {} | Response {}\u0026#34;.format( log_hook.func.__name__ if callable(log_hook.func) else \u0026#34;\u0026#34;, req.status_code, req.content, ), ) return req The first lines are what allows the use of the hook regardless of the decorator, with the downside of not having a function caller named. The actual call to logging is done by using the attribute previously created by our patch_http decorator, however, if no decorator is used, it defaults to a predefined http.client logger. Now the actual change to our code:\nimport logging import requests LOGGER = logging.getLogger(\u0026#34;external\u0026#34;) @patch_http(logger=LOGGER) def create_external_services(): response = requests.post(\u0026#34;..\u0026#34;, hooks={\u0026#34;response\u0026#34;: log_hook}) @patch_http(logger=LOGGER) def delete_external_services(): response = requests.post(\u0026#34;..\u0026#34;, hooks={\u0026#34;response\u0026#34;: log_hook}) I am still not entirely convinced if using a decorator for patching the hook is the cleanest way, however, it allows us to modify the logging messages for all requests in one place without having to duplicate code or easily add custom logic to all requests.\nFor example, say we want to log only if a 404 HTTP status code gets returned in create_external_services. We could modify our decorator to create an expected_statuses and check the response status code in log_hook before logging.\nfrom typing import Callable, Tuple import functools import logging def patch_http( logger: logging.Logger = None, level: int = logging.INFO, log_hook: Callable = log_hook, expected_statuses: Tuple[int] = (200, 201) ) -\u0026gt; Callable: if logger is None: logger = logging.getLogger(\u0026#34;http.client\u0026#34;) def decorate_http(func): @functools.wraps(func) def log_wrapper(*args, **kwargs): log_hook.expected_statuses = expected_statuses log_hook.func = func log_hook.logger = logger log_hook.level = level return func(*args, **kwargs) return log_wrapper return decorate_http def log_hook(req, *args, **kwargs): ... if not hasattr(log_hook, \u0026#34;expected_statuses\u0026#34;): setattr(log_hook, \u0026#34;expected_statuses\u0026#34;, (200,)) if req.status_code in log_hook.expected_statuses: log_hook.logger.log( log_hook.level, \u0026#34;[{}] | Request | Payload: {}\u0026#34;.format( log_hook.func.__name__ if callable(log_hook.func) else \u0026#34;\u0026#34;, req.request.data if hasattr(req.request, \u0026#34;data\u0026#34;) else {}, ), ) .... return req "});index.add({'id':67,'href':'/posts/writting-a-kernel-part-1/','title':"Understanding key concepts before writing a Kernel",'section':"Posts",'content':"In this series of posts, I intend to document my re-go on writing a small, portable kernel for the RISC-V architecture. I developed a micro-kernel for the RISC-V ISA in my bachelor thesis, however, due to the time it takes on developing a kernel, and the time I had on writing a bachelor\u0026rsquo;s thesis, I choose on writing the kernel for the Sifive\u0026rsquo;s HiFive1 Rev B development board due to their well written bare metal compatibility Library for the board, low cost and most importantly, RISC-V.\nBy using Sifive\u0026rsquo;s API, it took out the overhead of having to deal with the configurations of the clock, interrupt, CPU, and generally required hardware for the kernel to run. Long story short, I submitted my thesis, got approved, and now I am willing to rewrite the code all over. During the development of my thesis, there were components I needed to write and have a better understanding, so I was not able to pay as much attention as I wanted to the project design, structural decisions, and general kernel/architectural decisions. One of the decisions I made during the development phase was not to document my ideas, questions, and answers I had. This post attempts to fix this problem, by documenting on how to write a Kernel for the RISC-V architecture.\nBefore we start, let\u0026rsquo;s remember some basic computer concepts and try to assemble them together so we can better understand how each component fits within a kernel.\nA modern computer #  A modern computer consists of at least one central processing unit, main memory, some data storage, and another type of input and output devices. Computer architecture is the specification on which describes how software and hardware may interact with each other. Computer processors provide an abstract model interface known as the instruction set, which serves as an interface between the hardware and software.\nThe need for a kernel #  Application developers need to communicate with these types of hardware, and by having to learn each computer specification is difficult and time-consuming. The kernel is the middle section of the abstraction between hardware and user software (Figure 1). It manages computer resources to allow application programmers to communicate with them.\nBy having a simpler model of the computer, application programmers can write less error-prone software by leaving the hardware complexity to the kernel.\n\n  Kernels may provide little to no abstraction at all. Kernels may be necessary for specific purposes instead of offering any resource to an upper layer. We can take the traffic light system as an example. The system may need to change states every 60 seconds, and that is all. For that, instead of having a Kernel, we could do some simple bare-metal programming, enable a timer interrupt and have a timer interrupt handler handle state changes1.\nThe computer organization and architecture #  Although there are different distinctions made between computer architecture and organization, the first refers to what systems and application programmers see, which are the attributes that have a direct impact on the execution of a program, for example, whether a computer will have a multiply instruction, where the latter refers to the operational unit and its interconnections that make the architectural specifications, such as whether the multiply instruction will be implemented by a multiply unit or by a mechanism of repeated add unit. The ISA, the numbers of bits used to represent data types, the IO structure, and approaches for memory addressing are all organizational issues that need to be structured (Stallings 2011).\nThe computer organization creates a hierarchy of hardware attributes details that are transparent to the programmer, such the interface between the computer and peripherals, the memory technology used, the type of processor and control signals (Stallings 2011). Computer architecture should offer a clean abstract set to simplify design, modeling, and allow running software to communicate with the hardware available (Patterson and Hennessy 2017).\nThe processor needs extra hardware in order to do its job, RAM to store program and data, support for logic and at least one I/O device to transfer data between the computer and the outside world (Catsoulis 2005)\nProcessors should be designed to process, store and retrieve data, but for that to happen, the processor has to go through several stages, where (i) fetch the instruction from memory, which could be the register, cache or main memory, (ii) decode the instruction to figure out what action is required to run, (iii) fetch data from memory or a IO module if required, (iv) perform arithmetic or logical operation on the fetched data if required and (v) the results of an execution may require to be written back to memory or the IO module (Stallings 2011).\nFinal conclusions #  We understood a modern computer is a complex set of hardware with different factors and use-cases. We saw how a kernel should interact with the hardware and how it should abstract the underlying hardware resources and provide some sort of API for programmers and users to interact. Not all problems are solvable with a kernel, some times pure bare-metal programming is what it takes to solve the problem, however, when we are willing to multitask, exchange communication between different resources, a Kernel might come in handy dealing with those problems.\nComputer organization is hierarchy of hardware attribute details that are transparent to the programmer, like IO functions, inter-process communication, memory management and etc.\nI hope with this post you were able to understand or remember key concepts of fundamental \u0026ldquo;modern\u0026rdquo; computing. Part 2 we will start implementing the initial boot of our kernel, starting by initializing the CPU and booting into QEMU\u0026rsquo;s RISC-V emulator and as we go along, I will introduce more concepts like those introduced in this post.\nReferences #    Catsoulis, John. 2005. Designing Embedded Hardware. O\u0026rsquo;Reilly Media, Inc.\n  Patterson, D. A., and J. L. Hennessy. 2017. Computer Organization and Design Risc-V Edition: The Hardware Software Interface. The Morgan Kaufmann Series in Computer Architecture and Design. Elsevier Science. https://books.google.com.br/books?id=H7wxDQAAQBAJ.\n  Stallings, William. 2011. Operating Systems: Internals and Design Principles. 7th ed. Upper Saddle River, NJ, USA: Prentice Hall Press.\n    I don\u0026rsquo;t know how an actual traffic light system works, but I am assuming it\u0026rsquo;s some state-machine that handles interrupts of some kind. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':68,'href':'/menu/','title':"Menu",'section':"Hi, there",'content':" Blog Notes Social  Github Twitter RSS    "});index.add({'id':69,'href':'/books/','title':"Books",'section':"Hi, there",'content':"List #  Reading progress as of \u0026lt;2020-05-30 Sat\u0026gt;\nTable 1: Clock summary at [2020-05-30 Sat 00:59]     Headline Time       Total time 1d 1:05      List  1d 1:05     The Communist Manifesto   1:25    The Pragmatic Programmer: From…   2:48    Operating Systems: Internals and…   3:24    Clean Architecture   3:28    The Great Mental Models: General…   5:48    Nonviolent Communication: A language…   8:12    READING The Communist Manifesto #  READING The Pragmatic Programmer: From Journeyman to Master #  READING Operating Systems: Internals and Design Principles (9th Edition) #  Exercises #  1.1. CPU: Takes care of processing data Main memory: Volatile memory for storing data and program instructions Secondary storage: Non-volatile for permantely storing data. I/O: External peripherals such as USB drive, printer and etc.\n1.2. Memory address register (MAR): specifies the memory address for the next read or write. Memory buffer register (MBR): contains data to be written to memory or receives data read from memory.\n1.3. Processor-memory: Data may be transferred from processor to memory or from memory to processor. Processor-IO: Process may transfer data to I/O module or from I/O module to processor Data processing: Processor may perform arithmetic or logical operation Control: The instruction may specify a different location to fetch the next instruction from, altering the sequence of execution.\n1.4. Interrupts the current execution of the CPU. This allows external peripherals to process data while the CPU works on something else. When the data processing is over, the peripheral may trigger an interrupt requesting CPU attention. A CPU interrupt handler may take care of interrupt or ignore it.\n1.5. There are two types of handling interrupts: sequentially or by priority-policy. In sequential interrupts, if an interrupt happens within the handler of a current interrupt, the interrupt will be ignored for the moment by setting a pending interrupt. After it the current interrupt has been dealt, it then treats the next pending interrupt. Priority-based interrupts allows one interrupt to be handled by priority. Whiling handling one interrupt, if another interrupt occurs and the priority is higher than the current interrupt being dealt, it stores the current context and handles the higher priority interrupt.\n1.6. Cost, speed, size are characteristics that are important\nNotes #     Program execution\nA program consists of a set of instructions stored in memory. The processor fetches one instruction at a time and executes each instruction. The processing required for one instruction is called the instruction cycle. The instruction cycle is composed of three main stages:\n Fetch stage: The process fetches an instruction from memory. Most processor hold some type of PC (Program counter) register which points to the next instruction in memory. Each time a new instruction has been fetched, the PC is incremented to the next instruction. The fetch stage usually consists of the following “substages”  Address of PC is copied to the MAR (Memory address register), which either stores the memory address from where data will be fetched or the address to which data will be sent or stored.      READING Clean Architecture #  NEXT Clean Code #  READ The Great Mental Models: General Thinking Concepts #  READ Nonviolent Communication: A language for life #  **Mídia** - Noam Chomsky #  Duas concepções diferentes de democracia #   Uma sociedade democrática é aquela em que o povo dispõe de  condições de participar de maneira significativa na condução de seus assuntos pessoais e na qual os canais de informação são acessíveis e livres\n O povo deve ser impedido de conduzir seus assuntos pessoais e os  canais de informação devem ser estreita e rigidamente controlados\n Essa é a concepção predominante Primeiras revoluções democráticas na Inglaterra do século XVII (17) expressam em grande medida esse ponto de vista  Primeira operação de propaganda governamental #  Governo de Woodrow Wilson #  [[https://dynalist.io/u/ZQA1dAc7Eut0bwSRwZeMRqQ0]]\nPresidente dos Estados Unidos em 1916 #     Plataforma “Paz sem Vitória”\n  Metade da Primeira Guerra Mundial    População bastante pacifista e sem motivo algum que justificasse envolvimento em guerra Europeia #  Constituída uma comissão de propaganda governamental #  ComissãoCreel #  https://dynalist.io/u/7sEyNdz3VqlLWY9GpIypishZ\n  Committee on Public Information    1917 - 1919     Transformou uma população dentro de 6 meses\nConseguiua dentro de 6 meses transformar uma população pacifista em uma população histérica e belicosa que queria destruir tudo que fosse alemão\n  Efeito importante que levou a outros efeitos    Após a guerra, forma utilizadas as mesmas técnicas para gerar um Pânico Vermelho #  Obteve êxito considerável na destruição de sindicatos e na eliminação de problemas perigosos como #    Liberdade de imprensa    Liberdade de pensamento político  Grande apoio dos lideres empresariais e da mídia #    Ambos organizaram e investiram muito na iniciativa  Intelectuais progressistas participaram ativamente #  Pessoas do circulo de JohnDewey #  https://dynalist.io/u/4O4qv1%5Fwmp2T5nHYLMIiMcDD\nPolitical thoughts #  Abortion should be legal, safe and rare #  "});index.add({'id':70,'href':'/posts/hello-orgmode/','title':"Hello, org-mode and hugo",'section':"Posts",'content':"Hello, world! This is my first post here. This blog is created using Hugo and Emacs org-mode. I am still busy migrating my posts from Asciidoc to org-mode, so this should take a bit of time.\n"});index.add({'id':71,'href':'/posts/finding-exposed-git-repositories/','title':"Finding exposed .git repositories",'section':"Posts",'content':"Developers use git to version control their source code. We all do, in fact, this blog is currently versioned by git. However, we not only use git to version control, but also to deploy applications. Usually we push new code to a remote server, where the server takes care of testing the code and then deploying the application. There are different ways of deploying an application, but this is one of them.\nSome developers/sys-admins simply clone the respository to their server, then simply point their web-server to that directory. Most of the VCS keep a hidden directory at the root of the project. git keeps a .git directory at the root of the repository, where all the information of that project is stored, such as logs, versions, tags, configs, previous revisions and so on.\nNot only some developers/sys-admins clone the repository in their server, but they also point their web-server to that directory. Not only that, they also sometimes change the source to set some configurations files with sensitive informations (email/password, and so on).\nIf the web-server is pointing to the git repository and has directory listing enabled, we could download the .git using wget=/=curl recursively, then simply checkout a master and voilà.\nFor example, say https://seds.nl/.git exists, containing all the objects of this blog, we could simply run wget --mirror -I .git https://seds.nl/.git to download the repository.\nHow to find exposed git repositories #  We can simply try out every URL we know by adding /.git at the end of the TLD.\nJust kidding.\nAn easy way of finding websites which currently expose .git is using Google D0rks. If you are not familiar with Google D0rks, it’s basically a few operators Google offers you to filter out a few queries. Here is a list of some of them. The one we need is the intext: operator.\nintext:\u0026#34;Index of /.git\u0026#34; This query makes use of the intext operator. It allows us to ask Google to find all the pages that have a specific word in the body somewhere forcing inclusion on the page (source).\nLet’s see.\n  Holy sh1t. That’s ~89,900 results from Google. Can you imagine how much sensitive information there must be?\nHow to fix this #  Well, first of all, find a better way to getting your source code to a remote server and simply pointing your web-server to that directory. If you don’t feel like finding a better way, or just want to keep things simple, here is what you need to do.\nNginx #  Add the following telling Nginx to deny any request to a .git directory:\nlocation ~ /.git/ { deny all; } Apache #  Add the following telling Apache to deny any request to a .git directory:\n\u0026lt;DirectoryMatch \u0026#34;^/.*/\\.git/\u0026#34;\u0026gt; Order deny,allow Deny from all \u0026lt;/Directory\u0026gt; The only question that remains is: Is there anyway you could extract a .git from a web-server that has directory listing disabled? I haven’t looked much into it, but I wonder if there is anyway we could use git against itself.\n"});index.add({'id':72,'href':'/posts/notes-on-linux-printk/','title':"Notes on Linux's printk",'section':"Posts",'content':"Some of the content might be incorrect, since I am still trying to understand it thoroughly.\nSo I started studying the Linux Kernel more in depth, so I decided it would be nice for me to document my findings, so I can read it from time to time. I will be daily updating this post, as I am studying it everyday.\nKeep in mind that I am using the x86 architecture.\nprintk(const char * fmt, ...) #  The printk is meant to print a kernel message, which you can later read using the dmesg command. It provides a printf-like abstraction. It can be used as a debugging tool for logging messages from the kernel.\nIn kernel mode, you cannot use printf.\nThe * fmt argument is a format string, whereas the +...+ are variable arguments.\nThe include/linux/kern_levels.h defines 8 different log levels which specifies the severity of the error message. Those are:\n#define KERN_EMERG KERN_SOH \u0026#34;0\u0026#34; /* system is unusable */#define KERN_ALERT KERN_SOH \u0026#34;1\u0026#34; /* action must be taken immediately */#define KERN_CRIT KERN_SOH \u0026#34;2\u0026#34; /* critical conditions */#define KERN_ERR KERN_SOH \u0026#34;3\u0026#34; /* error conditions */#define KERN_WARNING KERN_SOH \u0026#34;4\u0026#34; /* warning conditions */#define KERN_NOTICE KERN_SOH \u0026#34;5\u0026#34; /* normal but significant condition */#define KERN_INFO KERN_SOH \u0026#34;6\u0026#34; /* informational */#define KERN_DEBUG KERN_SOH \u0026#34;7\u0026#34; /* debug-level messages */Comments are pretty clear what each one means. With all that, we can easily call printk like this: printk(KERN_ERR \u0026quot;Something happend). By default, KERN_WARNING is used when nothing is specified, though this can be changed by setting CONFIG_DEFAULT_MESSAGE_LOGLEVEL kernel option (+make menuconfig -\u0026gt; Kernel Hacking -\u0026gt; Default message log level+).\nFor convenience, Linux also provides shorthand definition to those calls:\n/* * These can be used to print at the various log levels. * All of these will print unconditionally, although note that pr_debug() * and other debug macros are compiled out unless either DEBUG is defined * or CONFIG_DYNAMIC_DEBUG is set. */ #define pr_emerg(fmt, ...) \\ printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)  #define pr_alert(fmt, ...) \\ printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)  #define pr_crit(fmt, ...) \\ printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)  #define pr_err(fmt, ...) \\ printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)  #define pr_warning(fmt, ...) \\ printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)  #define pr_warn pr_warning  #define pr_notice(fmt, ...) \\ printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)  #define pr_info(fmt, ...) \\ printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__) Meaning instead of calling printk(KERN_EMERG \u0026quot;System is corrupted!\u0026quot;) we could call pr_emerg(\u0026quot;System is corrupted\u0026quot;) which is basically the same thing. Unless you compile your kernel in DEBUG mode, you can also use pr_debug and KERN_DEBUG.\nLog level allows the kernel to determine the importance of a message, with that, it can decide whether it should present the message immediately to the user (printing in the console, etc).\nThe #define console_loglevel (console_printk[0]) is used to compare the log level of the message against this defined variable. If the priority is \u0026gt; than this value, the message will then be printed to the current console. Note that console_loglevel’s value comes from console_printk[0] which is defined as an array (extern int console_printk[]). kernel/printk/printk.c defines each index value:\nint console_printk[4] = { CONSOLE_LOGLEVEL_DEFAULT, /* console_loglevel */ MESSAGE_LOGLEVEL_DEFAULT, /* default_message_loglevel */ CONSOLE_LOGLEVEL_MIN, /* minimum_console_loglevel */ CONSOLE_LOGLEVEL_DEFAULT, /* default_console_loglevel */ }; Your current console_loglevel can be found by printing /proc/sys/kernel/printk:\n$ cat /proc/sys/kernel/printk 4 4 1 4 From left to right, the meaning of those values are as follow: current, default, minimum, boot-time-default. For example, if you would like to get all messages printed to your current console, you can simply change these values to 8:\n$ echo 8 \u0026gt; /proc/sys/kernel/printk Or by setting the log level through dmesg using the -n argument:\n$ dmesg -n 8 References #   Linux Inside - A book-in-progress about the Linux Kernel and its insides  "});index.add({'id':73,'href':'/notes/a_brief_introduction_to_emacs_lisp_for_people_with_programming_background_lgmoneda/','title':"A brief introduction to Emacs Lisp for people with programming background | lgmoneda",'section':"Index",'content':" Tags Emacs Programming  "});index.add({'id':74,'href':'/notes/dots_config_el_at_master_jethrokuan_dots/','title':"dots/config.el at master · jethrokuan/dots",'section':"Index",'content':"Source: https://github.com/jethrokuan/dots/blob/0064ea2aab667f115a14ce48292731db46302c53/.doom.d/config.el#L488\nThe following exports all roam files to Hugo and includes backlinks pre-processor.\n(defun jethro/org-roam-export-all () \u0026#34;Re-exports all Org-roam files to Hugo markdown.\u0026#34; (interactive) (dolist (f (org-roam--list-all-files)) (with-current-buffer (find-file f) (when (s-contains? \u0026#34;SETUPFILE\u0026#34; (buffer-string)) (org-hugo-export-wim-to-md))))) (defun jethro/org-roam--backlinks-list (file) (when (org-roam--org-roam-file-p file) (mapcar #\u0026#39;car (org-roam-db-query [:select :distinct [from] :from links :where (= to $s1) :and from :not :like $s2] file \u0026#34;%private%\u0026#34;)))) (defun jethro/org-export-preprocessor (_backend) (when-let ((links (jethro/org-roam--backlinks-list (buffer-file-name)))) (insert \u0026#34;\\n** Backlinks\\n\u0026#34;) (dolist (link links) (insert (format \u0026#34;- [[file:%s][%s]]\\n\u0026#34; (file-relative-name link org-roam-directory) (org-roam--get-title-or-slug link)))))) (add-hook \u0026#39;org-export-before-processing-hook #\u0026#39;jethro/org-export-preprocessor)) "});index.add({'id':76,'href':'/notes/the-go-programming-language-spec/','title':"The Go Programming Language Specification - The Go Programming Language",'section':"Index",'content':" tags Go Programming Programming  For an operand x of type T, the address operation \u0026amp;x generates a pointer of type *T to x. The operand must be addressable, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array. As an exception to the addressability requirement, x may also be a (possibly parenthesized) composite literal. If the evaluation of x would cause a run-time panic, then the evaluation of \u0026amp;x does too.\nFor an operand x of pointer type *T, the pointer indirection *x denotes the variable of type T pointed to by x. If x is nil, an attempt to evaluate *x will cause a run-time panic.\n"});})();