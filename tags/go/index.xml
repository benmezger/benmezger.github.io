<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Ben Mezger</title><link>https://seds.nl/tags/go/</link><description>Recent content in go on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jun 2020 20:26:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go interfaces</title><link>https://seds.nl/notes/go_interfaces/</link><pubDate>Mon, 22 Jun 2020 20:26:00 -0300</pubDate><guid>https://seds.nl/notes/go_interfaces/</guid><description>tags Go Programming Programming Code snippets The following implements a DataModel, like Django&amp;rsquo;s Model class which requires Validate and Save methods be implemented by whoever uses that Interface. The problem is the Model. m object will be nil, because Model cannot access the User due to the embedded Model struct within the User struct.
package main import &amp;#34;fmt&amp;#34; type DataModel interface { Validate() Save() } type Model struct { DataModel } func (m *Model) Validate(){ fmt.</description></item><item><title>Go reading struct tag</title><link>https://seds.nl/notes/go_reading_struct_tag/</link><pubDate>Sun, 21 Jun 2020 03:02:00 -0300</pubDate><guid>https://seds.nl/notes/go_reading_struct_tag/</guid><description>tags Go Programming Programming Code snippets The following code reads a specific struct Tag by name.
import ( &amp;#34;reflect&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;fmt&amp;#34; ) type Profile struct { Id int `validate:&amp;#34;numeric&amp;#34; json:&amp;#34;id&amp;#34;` First string `validate:&amp;#34;required&amp;#34; json:&amp;#34;first&amp;#34;` Last string `validate:&amp;#34;required&amp;#34; json:&amp;#34;last&amp;#34;` Birth string `validate:&amp;#34;required&amp;#34; json:&amp;#34;birth&amp;#34;` Sex string `validate:&amp;#34;required&amp;#34; json:&amp;#34;sex&amp;#34;` MaritalStatus string `validate:&amp;#34;required&amp;#34; json:&amp;#34;marital_status&amp;#34;` Children int `validate:&amp;#34;numeric&amp;#34; json:&amp;#34;children&amp;#34;` } func GetStructFieldValidators(data interface{}) map[string][]string { v := reflect.ValueOf(data) t := reflect.TypeOf(data) validators := make(map[string][]string) for i := 0; i &amp;lt; v.</description></item><item><title>Go defer</title><link>https://seds.nl/notes/go_defer/</link><pubDate>Fri, 19 Jun 2020 09:47:00 -0300</pubDate><guid>https://seds.nl/notes/go_defer/</guid><description> tags Go Programming Programming import &amp;#34;fmt&amp;#34; func trace(name string) string { fmt.Println(&amp;#34;Entering &amp;#34;, name) return name } func un(name string) string { fmt.Println(&amp;#34;Exiting&amp;#34;, name) return name } func a() { defer un(trace(&amp;#34;a&amp;#34;)) fmt.Println(&amp;#34;Hello, world&amp;#34;) } func b(){ defer un(trace(&amp;#34;b&amp;#34;)) fmt.Println(&amp;#34;Before i &amp;lt; 10 loop&amp;#34;) for i:=0 ; i &amp;lt; 10; i++{ defer fmt.Println(&amp;#34;i =&amp;#34;, i) } fmt.Println(&amp;#34;After i &amp;lt; 10 loop&amp;#34;) } func main(){ a() b() } Entering a Hello, world Exiting a Entering b Before i &amp;lt; 10 loop After i &amp;lt; 10 loop i = 9 i = 8 i = 7 i = 6 i = 5 i = 4 i = 3 i = 2 i = 1 i = 0 Exiting b</description></item><item><title>Go Programming</title><link>https://seds.nl/notes/go-programming/</link><pubDate>Sun, 31 May 2020 12:31:00 -0300</pubDate><guid>https://seds.nl/notes/go-programming/</guid><description>Backlinks # The Go Programming Language Specification - The Go Programming Language Go reading struct tag Go defer Go interfaces tags Programming Computer Science Related notes: Interesting Golang libraries
Packages # In Go, programs start running in package main. Package names are defined by the last element of the import path: import math/rand has files which begin with the package rand. Packages consists of a bunch of .</description></item><item><title>Interesting Golang libraries</title><link>https://seds.nl/notes/interesting-golang-libraries/</link><pubDate>Sat, 30 May 2020 20:33:00 -0300</pubDate><guid>https://seds.nl/notes/interesting-golang-libraries/</guid><description>Backlinks # Go Programming
https://github.com/jmoiron/sqlx
https://pg.uptrace.dev/guide/
https://github.com/go-pg/pg
Entered on [2020-05-27 Wed 21:36]
&amp;lt;~/workspace/commit-validator/requirements.txt&amp;gt;</description></item><item><title>The Go Programming Language Specification - The Go Programming Language</title><link>https://seds.nl/notes/the-go-programming-language-spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seds.nl/notes/the-go-programming-language-spec/</guid><description>tags Go Programming Programming For an operand x of type T, the address operation &amp;amp;x generates a pointer of type *T to x. The operand must be addressable, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array. As an exception to the addressability requirement, x may also be a (possibly parenthesized) composite literal.</description></item></channel></rss>