<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Ben Mezger</title><link>https://seds.nl/tags/python/</link><description>Recent content in python on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Aug 2020 16:44:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python temporary file</title><link>https://seds.nl/notes/python_temporary_file/</link><pubDate>Sun, 02 Aug 2020 16:44:00 -0300</pubDate><guid>https://seds.nl/notes/python_temporary_file/</guid><description>tags Python Programming Python&amp;rsquo;s tempfile standard library is pretty neat when we need to create a temporary file and/or directories. Instead of having a much of code like this:
import pathlib def create_file(filename): if pathlib.Path(filename).exists(): # handle path removal/rewrite/backup pass with open(filename, &amp;#34;w&amp;#34;) as f: # write to file pass We can ask Python to take care of handling this type of tasks for us. tempfile handles most of the OS API, so we can focus on writting the logic instead.</description></item><item><title>Python Async</title><link>https://seds.nl/notes/python_async/</link><pubDate>Thu, 30 Jul 2020 22:38:00 -0300</pubDate><guid>https://seds.nl/notes/python_async/</guid><description>tags Python Programming Important keywords # Asynchronous IO (async IO) Language-agnostic paradigm (model) coroutine A Python (sort of generator function) async/await Python keywords used to defined a coroutine asyncio Python package that provides an API for running/managing coroutines Coroutine # A coroutine allows a function to pause before returning or indirectly call another coroutine for some time, for example:
import asyncio import time async def count(n): print(f&amp;#34;n is {n}&amp;#34;) await asyncio.</description></item><item><title>Python</title><link>https://seds.nl/notes/python/</link><pubDate>Sun, 31 May 2020 13:04:00 -0300</pubDate><guid>https://seds.nl/notes/python/</guid><description>Backlinks # Code snippets Python Async Python temporary file Compiler Go Programming tags Computer Science Programming</description></item><item><title>Patching requests HTTP hooks with custom arguments</title><link>https://seds.nl/posts/http-hooks-with-custom-arguments/</link><pubDate>Thu, 07 May 2020 18:59:00 -0300</pubDate><guid>https://seds.nl/posts/http-hooks-with-custom-arguments/</guid><description>I am working on a project where we have lots of functions integrated with external APIs. Functions where HTTP requests get dispatched, we log the current callerâ€™s name, headers, and data (if any) in case we need to debug anything. For example:
import logging import requests LOGGER = logging.getLogger(&amp;#34;external&amp;#34;) def create_external_services(): ... LOGGER.info(f&amp;#34;[func] | Request {data}&amp;#34;) response = requests.post(&amp;#34;..&amp;#34;) LOGGER.info(f&amp;#34;[func] | Response {response.status_code} {response.text}&amp;#34;) ... def delete_external_services(): LOGGER.info(f&amp;#34;[func] | Request {data}&amp;#34;) response = requests.</description></item></channel></rss>