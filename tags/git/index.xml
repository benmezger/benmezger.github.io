<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Ben Mezger</title><link>https://seds.nl/tags/git/</link><description>Recent content in git on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Aug 2020 14:09:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git change commit author</title><link>https://seds.nl/notes/git_change_commit_author/</link><pubDate>Sat, 22 Aug 2020 14:09:00 -0300</pubDate><guid>https://seds.nl/notes/git_change_commit_author/</guid><description> tags Programming Software Engineering The following scripts changes all repository commits from an specific author to a new author. This is specially handy if you mess up your git config at somepoint without knowing and start commiting with a random author or you change your email/name.
#!/bin/sh git filter-branch --env-filter &amp;#39; OLD_EMAIL=&amp;#34;your-old-email@example.com&amp;#34; CORRECT_NAME=&amp;#34;Your Correct Name&amp;#34; CORRECT_EMAIL=&amp;#34;your-correct-email@example.com&amp;#34; if [ &amp;#34;$GIT_COMMITTER_EMAIL&amp;#34; = &amp;#34;$OLD_EMAIL&amp;#34; ] then export GIT_COMMITTER_NAME=&amp;#34;$CORRECT_NAME&amp;#34; export GIT_COMMITTER_EMAIL=&amp;#34;$CORRECT_EMAIL&amp;#34; fi if [ &amp;#34;$GIT_AUTHOR_EMAIL&amp;#34; = &amp;#34;$OLD_EMAIL&amp;#34; ] then export GIT_AUTHOR_NAME=&amp;#34;$CORRECT_NAME&amp;#34; export GIT_AUTHOR_EMAIL=&amp;#34;$CORRECT_EMAIL&amp;#34; fi &amp;#39; --tag-name-filter cat -- --branches --tags</description></item><item><title>Personal git workflow</title><link>https://seds.nl/notes/personal_git_workflow/</link><pubDate>Tue, 04 Aug 2020 11:06:00 -0300</pubDate><guid>https://seds.nl/notes/personal_git_workflow/</guid><description>tags Git Programming Workflow As of today, this is currently my git flow for most of my projects.
Commit messages # From: https://chris.beams.io/posts/git-commit/
Feat: Any code that contains only a new feature, whether a new model field, a new API flag, etc Refactor: Any general code refactoring that does not contain anything new nor fixes anything. Chore: Anything related to the build configuration, dependency updates Docs: Anything related to documentation.</description></item><item><title>Attaching Jira issues to commit</title><link>https://seds.nl/posts/attaching-jira-issues-to-commits/</link><pubDate>Sun, 24 May 2020 02:39:00 -0300</pubDate><guid>https://seds.nl/posts/attaching-jira-issues-to-commits/</guid><description>TLDR ↕ Dynamically attach Jira attributes to commit body using git-hook. Check the project’s README. The place I work at requires Jira story ID and task ID attached to the commit body. Initially, I was attaching the ID to the commit body manually, by checking either my previous commit or opening up the Jira board, however, after working some hours I was easily forgetting to attach the IDs to the commit and getting annoying having to either reword them and perhaps having to lookup Jira again.</description></item><item><title>Finding exposed .git repositories</title><link>https://seds.nl/posts/finding-exposed-git-repositories/</link><pubDate>Mon, 30 Oct 2017 21:59:00 -0200</pubDate><guid>https://seds.nl/posts/finding-exposed-git-repositories/</guid><description>Developers use git to version control their source code. We all do, in fact, this blog is currently versioned by git. However, we not only use git to version control, but also to deploy applications. Usually we push new code to a remote server, where the server takes care of testing the code and then deploying the application. There are different ways of deploying an application, but this is one of them.</description></item></channel></rss>