<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Ben Mezger</title><link>https://seds.nl/tags/programming/</link><description>Recent content in programming on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Oct 2020 07:43:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Technical challenge checklist</title><link>https://seds.nl/notes/technical_challenge_checklist/</link><pubDate>Fri, 16 Oct 2020 07:43:00 -0300</pubDate><guid>https://seds.nl/notes/technical_challenge_checklist/</guid><description>tags Programming Software Engineering Having done quiet a lot of technical challenges, and having forgotten some details when submitting, I came up with a good checklist of things to check before submitting the technical test.
Must do checklist # Keep commit readable, check if the company has any commit format of their own in their public GitHub organization or their wiki page (if any), otherwise, use conventional commits Structure your commits so we can revert in case of any bug.</description></item><item><title>Go binary search tree</title><link>https://seds.nl/notes/go_binary_search_tree/</link><pubDate>Mon, 07 Sep 2020 18:52:00 -0300</pubDate><guid>https://seds.nl/notes/go_binary_search_tree/</guid><description>tags Go Programming Software Engineering Requirements # Sorted array of lenght N Performance # Say an array contains N (search space o N) elements, and we divide N/2, getting a search space of N/2, how many steps do we need until we get down to just one an array of 1 element. O(log2 n) problem. Implementation # Can be implemented recursively or non-recursively.</description></item><item><title>Go Context package</title><link>https://seds.nl/notes/go_context_package/</link><pubDate>Thu, 03 Sep 2020 17:08:00 -0300</pubDate><guid>https://seds.nl/notes/go_context_package/</guid><description> tags Programming Go Programming Keywords # Cancellation: is when you are requesting some services, and you cancel this request Propagation: means that if we asked someone for a service then you tell that person to cancel</description></item><item><title>Python temporary file</title><link>https://seds.nl/notes/python_temporary_file/</link><pubDate>Sun, 02 Aug 2020 16:44:00 -0300</pubDate><guid>https://seds.nl/notes/python_temporary_file/</guid><description>tags Python Programming Python&amp;rsquo;s tempfile standard library is pretty neat when we need to create a temporary file and/or directories. Instead of having a much of code like this:
import pathlib def create_file(filename): if pathlib.Path(filename).exists(): # handle path removal/rewrite/backup pass with open(filename, &amp;#34;w&amp;#34;) as f: # write to file pass We can ask Python to take care of handling this type of tasks for us. tempfile handles most of the OS API, so we can focus on writting the logic instead.</description></item><item><title>Python Async</title><link>https://seds.nl/notes/python_async/</link><pubDate>Thu, 30 Jul 2020 22:38:00 -0300</pubDate><guid>https://seds.nl/notes/python_async/</guid><description>tags Python Programming Important keywords # Asynchronous IO (async IO) Language-agnostic paradigm (model) coroutine A Python (sort of generator function) async/await Python keywords used to defined a coroutine asyncio Python package that provides an API for running/managing coroutines Coroutine # A coroutine allows a function to pause before returning or indirectly call another coroutine for some time, for example:
import asyncio import time async def count(n): print(f&amp;#34;n is {n}&amp;#34;) await asyncio.</description></item><item><title>Methodologies</title><link>https://seds.nl/notes/methodologies/</link><pubDate>Tue, 23 Jun 2020 09:50:00 -0300</pubDate><guid>https://seds.nl/notes/methodologies/</guid><description> tags Programming Software Engineering</description></item><item><title>Software Engineering</title><link>https://seds.nl/notes/software_engineering/</link><pubDate>Tue, 23 Jun 2020 09:50:00 -0300</pubDate><guid>https://seds.nl/notes/software_engineering/</guid><description> tags Programming Computer Science</description></item><item><title>Use case template</title><link>https://seds.nl/notes/use_case_template/</link><pubDate>Tue, 23 Jun 2020 09:49:00 -0300</pubDate><guid>https://seds.nl/notes/use_case_template/</guid><description>tags Computer Science Programming Methodologies Software Engineering The following is a requirements template developed by Alistair Cockburn. This template may or may not have all or more fields related to the requirements itself.
Recommended reading:
Basic Use Case Template USE CASE #N Goal in context Scope Level &amp;lt;one of: Summary, Primary task, Subfunction&amp;gt; Preconditions Success end condition Failed end condition Primary actor &amp;lt;a role name for the primary actor, or description&amp;gt; Trigger &amp;lt;the action upon the system that starts the use case, may be time event&amp;gt; Priority &amp;lt;how critical to your system/organization&amp;gt; Frequency Usage example:</description></item><item><title>Go interfaces</title><link>https://seds.nl/notes/go_interfaces/</link><pubDate>Mon, 22 Jun 2020 20:26:00 -0300</pubDate><guid>https://seds.nl/notes/go_interfaces/</guid><description>tags Go Programming Programming Code snippets The following implements a DataModel, like Django&amp;rsquo;s Model class which requires Validate and Save methods be implemented by whoever uses that Interface. The problem is the Model. m object will be nil, because Model cannot access the User due to the embedded Model struct within the User struct.
package main import &amp;#34;fmt&amp;#34; type DataModel interface { Validate() Save() } type Model struct { DataModel } func (m *Model) Validate(){ fmt.</description></item><item><title>List Foreign key constrants defined in a database</title><link>https://seds.nl/notes/list_foreign_key_constrants_defined_in_a_database/</link><pubDate>Sun, 21 Jun 2020 03:20:00 -0300</pubDate><guid>https://seds.nl/notes/list_foreign_key_constrants_defined_in_a_database/</guid><description>tags Programming Code snippets Postgres Postgres View foreign key constrants defined in all databases
select kcu.table_schema || &amp;#39;.&amp;#39; ||kcu.table_name as foreign_table, &amp;#39;&amp;gt;-&amp;#39; as rel, rel_tco.table_schema || &amp;#39;.&amp;#39; || rel_tco.table_name as primary_table, string_agg(kcu.column_name, &amp;#39;, &amp;#39;) as fk_columns, kcu.constraint_name from information_schema.table_constraints tco join information_schema.key_column_usage kcu on tco.constraint_schema = kcu.constraint_schema and tco.constraint_name = kcu.constraint_name join information_schema.referential_constraints rco on tco.constraint_schema = rco.constraint_schema and tco.constraint_name = rco.constraint_name join information_schema.table_constraints rel_tco on rco.unique_constraint_schema = rel_tco.</description></item><item><title>Go reading struct tag</title><link>https://seds.nl/notes/go_reading_struct_tag/</link><pubDate>Sun, 21 Jun 2020 03:02:00 -0300</pubDate><guid>https://seds.nl/notes/go_reading_struct_tag/</guid><description>tags Go Programming Programming Code snippets The following code reads a specific struct Tag by name.
import ( &amp;#34;reflect&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;fmt&amp;#34; ) type Profile struct { Id int `validate:&amp;#34;numeric&amp;#34; json:&amp;#34;id&amp;#34;` First string `validate:&amp;#34;required&amp;#34; json:&amp;#34;first&amp;#34;` Last string `validate:&amp;#34;required&amp;#34; json:&amp;#34;last&amp;#34;` Birth string `validate:&amp;#34;required&amp;#34; json:&amp;#34;birth&amp;#34;` Sex string `validate:&amp;#34;required&amp;#34; json:&amp;#34;sex&amp;#34;` MaritalStatus string `validate:&amp;#34;required&amp;#34; json:&amp;#34;marital_status&amp;#34;` Children int `validate:&amp;#34;numeric&amp;#34; json:&amp;#34;children&amp;#34;` } func GetStructFieldValidators(data interface{}) map[string][]string { v := reflect.ValueOf(data) t := reflect.TypeOf(data) validators := make(map[string][]string) for i := 0; i &amp;lt; v.</description></item><item><title>Go defer</title><link>https://seds.nl/notes/go_defer/</link><pubDate>Fri, 19 Jun 2020 09:47:00 -0300</pubDate><guid>https://seds.nl/notes/go_defer/</guid><description> tags Go Programming Programming import &amp;#34;fmt&amp;#34; func trace(name string) string { fmt.Println(&amp;#34;Entering &amp;#34;, name) return name } func un(name string) string { fmt.Println(&amp;#34;Exiting&amp;#34;, name) return name } func a() { defer un(trace(&amp;#34;a&amp;#34;)) fmt.Println(&amp;#34;Hello, world&amp;#34;) } func b(){ defer un(trace(&amp;#34;b&amp;#34;)) fmt.Println(&amp;#34;Before i &amp;lt; 10 loop&amp;#34;) for i:=0 ; i &amp;lt; 10; i++{ defer fmt.Println(&amp;#34;i =&amp;#34;, i) } fmt.Println(&amp;#34;After i &amp;lt; 10 loop&amp;#34;) } func main(){ a() b() } Entering a Hello, world Exiting a Entering b Before i &amp;lt; 10 loop After i &amp;lt; 10 loop i = 9 i = 8 i = 7 i = 6 i = 5 i = 4 i = 3 i = 2 i = 1 i = 0 Exiting b</description></item><item><title>Code snippets</title><link>https://seds.nl/notes/code-snippets/</link><pubDate>Sun, 31 May 2020 14:28:00 -0300</pubDate><guid>https://seds.nl/notes/code-snippets/</guid><description> tags Programming Python Python run HTTP server locally # 1 python -m http.server 8000 --bind 127.0.0.1</description></item><item><title>Python</title><link>https://seds.nl/notes/python/</link><pubDate>Sun, 31 May 2020 13:04:00 -0300</pubDate><guid>https://seds.nl/notes/python/</guid><description> tags Computer Science Programming</description></item><item><title>C programming</title><link>https://seds.nl/notes/c-programming/</link><pubDate>Sun, 31 May 2020 12:33:00 -0300</pubDate><guid>https://seds.nl/notes/c-programming/</guid><description>Tags Computer Science Programming C project architecture guidelines # Functions exposed in the header are like public methods # Think of each module like a class. The functions you expose in the header are like public methods. Only put a function in the header if it part of the module&amp;rsquo;s needed interface.
Avoiding circular module dependencies # Avoid circular module dependencies. Module A and module B should not call each other.</description></item><item><title>Programming</title><link>https://seds.nl/notes/programming/</link><pubDate>Sun, 31 May 2020 12:33:00 -0300</pubDate><guid>https://seds.nl/notes/programming/</guid><description/></item><item><title>Go Programming</title><link>https://seds.nl/notes/go-programming/</link><pubDate>Sun, 31 May 2020 12:31:00 -0300</pubDate><guid>https://seds.nl/notes/go-programming/</guid><description>tags Programming Computer Science Related notes: Interesting Golang libraries
Packages # In Go, programs start running in package main. Package names are defined by the last element of the import path: import math/rand has files which begin with the package rand. Packages consists of a bunch of .go files.
Package identifiers (functions, variables, struct and other data), may be used in other packages, with a few exceptions. Go allows only exported identifiers to be called after the package import.</description></item><item><title>Interesting Golang libraries</title><link>https://seds.nl/notes/interesting-golang-libraries/</link><pubDate>Sat, 30 May 2020 20:33:00 -0300</pubDate><guid>https://seds.nl/notes/interesting-golang-libraries/</guid><description>https://github.com/jmoiron/sqlx https://pg.uptrace.dev/guide/ https://github.com/go-pg/pg Entered on [2020-05-27 Wed 21:36]
&amp;lt;~/workspace/commit-validator/requirements.txt&amp;gt;</description></item><item><title>The Go Programming Language Specification - The Go Programming Language</title><link>https://seds.nl/notes/the-go-programming-language-spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seds.nl/notes/the-go-programming-language-spec/</guid><description>tags Go Programming Programming For an operand x of type T, the address operation &amp;amp;x generates a pointer of type *T to x. The operand must be addressable, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array. As an exception to the addressability requirement, x may also be a (possibly parenthesized) composite literal.</description></item></channel></rss>