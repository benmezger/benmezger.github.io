<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>emacs on Ben Mezger</title><link>https://seds.nl/tags/emacs/</link><description>Recent content in emacs on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Jul 2020 08:51:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>Using macros in Emacs</title><link>https://seds.nl/notes/using_macros_in_emacs/</link><pubDate>Wed, 29 Jul 2020 08:51:00 -0300</pubDate><guid>https://seds.nl/notes/using_macros_in_emacs/</guid><description>tags Emacs Emacs macros allows us to record sequence of keyboard keystrokes, mouse actions, menu actions that is bound to an Emacs command. It allows us to record these actions and repeat them when needed.
Creating a new macro # C-x ( starts recording a macro C-x ) stops recording a macro C-x e executes the macro C-u 37 C-x e executes the macro 37 times C-u 0 C-x e executes the macro an infinite number of times until EOF.</description></item><item><title>Org-roam</title><link>https://seds.nl/notes/org_roam/</link><pubDate>Thu, 04 Jun 2020 08:51:00 -0300</pubDate><guid>https://seds.nl/notes/org_roam/</guid><description>Backlinks # Org-roam export backlinks on Hugo Org-roam Firefox bookmark Ox-hugo export all roam to Hugo tags Org-mode Emacs</description></item><item><title>Ox-hugo export all roam to Hugo</title><link>https://seds.nl/notes/ox_hugo_export_all_roam_to_hugo/</link><pubDate>Thu, 04 Jun 2020 08:39:00 -0300</pubDate><guid>https://seds.nl/notes/ox_hugo_export_all_roam_to_hugo/</guid><description>tags Emacs Org-mode Org-roam Export all org-roam files to Hugo markdown (this might take some time)
From: jethrokuan/dots
(defun benmezger/org-roam-export-all () &amp;#34;Re-exports all Org-roam files to Hugo markdown.&amp;#34; (interactive) (dolist (f (org-roam--list-all-files)) (with-current-buffer (find-file f) (when (s-contains? &amp;#34;SETUPFILE&amp;#34; (buffer-string)) (org-hugo-export-wim-to-md))))) Adding an empty #+SETUPFILE: forces benmezger/org-roam-export-all to export the file.</description></item><item><title>Emacs</title><link>https://seds.nl/notes/emacs-editor/</link><pubDate>Thu, 04 Jun 2020 08:36:00 -0300</pubDate><guid>https://seds.nl/notes/emacs-editor/</guid><description>Backlinks # Org-roam export backlinks on Hugo Org-roam Org-roam Firefox bookmark Org-mode Firefox bookmarks Ox-hugo export all roam to Hugo Using macros in Emacs A brief introduction to Emacs Lisp for people with programming background | lgmoneda</description></item><item><title>Org-mode</title><link>https://seds.nl/notes/org_mode/</link><pubDate>Thu, 04 Jun 2020 08:35:00 -0300</pubDate><guid>https://seds.nl/notes/org_mode/</guid><description>Backlinks # Org-roam export backlinks on Hugo Org-roam Org-roam Firefox bookmark Org-mode Firefox bookmarks Ox-hugo export all roam to Hugo</description></item><item><title>Org-roam export backlinks on Hugo</title><link>https://seds.nl/notes/org_roam_export_backlinks_on_hugo/</link><pubDate>Thu, 04 Jun 2020 08:29:00 -0300</pubDate><guid>https://seds.nl/notes/org_roam_export_backlinks_on_hugo/</guid><description> tags Org-mode Emacs Org-roam Insert roam backlinks URL when exporting orgmode to HTML
From: jethrokuan/dots
(defun benmezger/org-roam-export-all () &amp;#34;Re-exports all Org-roam files to Hugo markdown.&amp;#34; (interactive) (dolist (f (org-roam--list-all-files)) (with-current-buffer (find-file f) (when (s-contains? &amp;#34;SETUPFILE&amp;#34; (buffer-string)) (org-hugo-export-wim-to-md))))) (defun benmezger/org-roam--backlinks-list (file) (when (org-roam--org-roam-file-p file) (mapcar #&amp;#39;car (org-roam-db-query [:select :distinct [from] :from links :where (= to $s1) :and from :not :like $s2] file &amp;#34;%private%&amp;#34;)))) (defun benmezger/org-export-preprocessor (_backend) (when-let ((links (benmezger/org-roam--backlinks-list (buffer-file-name)))) (insert &amp;#34;\n** Backlinks\n&amp;#34;) (dolist (link links) (insert (format &amp;#34;- [[file:%s][%s]]\n&amp;#34; (file-relative-name link org-roam-directory) (org-roam--get-title-or-slug link)))))) (add-hook &amp;#39;org-export-before-processing-hook #benmezger/org-export-preprocessor))</description></item><item><title>Org-roam Firefox bookmark</title><link>https://seds.nl/notes/org-roam-firefox-bookmark/</link><pubDate>Sat, 30 May 2020 19:30:00 -0300</pubDate><guid>https://seds.nl/notes/org-roam-firefox-bookmark/</guid><description>tags Org-mode Emacs Org-roam Org-roam has roam-protocol, which we can call throughout the system just like Org-mode Firefox bookmarks.
Org-roam protocol supports specifying the roam template to use. Template is the template key for a template in org-roam-capture-ref-templates. More documentation on the templating system can be found here.
These templates should contain a #+ROAM_KEY: ${ref} in it.
Roam-ref protocol # Find and creates from with a specific ROAM_KEY</description></item><item><title>Org-mode Firefox bookmarks</title><link>https://seds.nl/notes/orgmode-firefox-bookmark/</link><pubDate>Sat, 30 May 2020 19:22:00 -0300</pubDate><guid>https://seds.nl/notes/orgmode-firefox-bookmark/</guid><description>Backlinks # Org-roam Firefox bookmark tags Org-mode Emacs Add the following scripts to call org-capture from Firefox
Call capture template # The following calls capture template key n
javascript:location.href=&amp;#39;org-protocol://capture?template=n&amp;#39;+&amp;#39;&amp;amp;url=&amp;#39;+encodeURIComponent(window.location.href)+&amp;#39;&amp;amp;title=&amp;#39;+encodeURIComponent(document.title)+&amp;#39;&amp;amp;body=&amp;#39;+encodeURIComponent(window.getSelection()); Without a capture template # If unspecified, the template key is set in the variable org-protocol-default-template-key. The following template placeholders are available:
%:link The URL %:description The webpage title %:annotation Equivalent to [[%:link][%:description]] %i The selected text See: https:orgmode.</description></item><item><title>Hello, org-mode and hugo</title><link>https://seds.nl/posts/hello-orgmode/</link><pubDate>Thu, 23 Apr 2020 00:00:00 -0300</pubDate><guid>https://seds.nl/posts/hello-orgmode/</guid><description>Hello, world! This is my first post here. This blog is created using Hugo and Emacs org-mode. I am still busy migrating my posts from Asciidoc to org-mode, so this should take a bit of time.</description></item><item><title>A brief introduction to Emacs Lisp for people with programming background | lgmoneda</title><link>https://seds.nl/notes/a_brief_introduction_to_emacs_lisp_for_people_with_programming_background_lgmoneda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seds.nl/notes/a_brief_introduction_to_emacs_lisp_for_people_with_programming_background_lgmoneda/</guid><description> Tags Emacs Programming</description></item><item><title>dots/config.el at master Â· jethrokuan/dots</title><link>https://seds.nl/notes/dots_config_el_at_master_jethrokuan_dots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seds.nl/notes/dots_config_el_at_master_jethrokuan_dots/</guid><description>Source: https://github.com/jethrokuan/dots/blob/0064ea2aab667f115a14ce48292731db46302c53/.doom.d/config.el#L488
The following exports all roam files to Hugo and includes backlinks pre-processor.
(defun jethro/org-roam-export-all () &amp;#34;Re-exports all Org-roam files to Hugo markdown.&amp;#34; (interactive) (dolist (f (org-roam--list-all-files)) (with-current-buffer (find-file f) (when (s-contains? &amp;#34;SETUPFILE&amp;#34; (buffer-string)) (org-hugo-export-wim-to-md))))) (defun jethro/org-roam--backlinks-list (file) (when (org-roam--org-roam-file-p file) (mapcar #&amp;#39;car (org-roam-db-query [:select :distinct [from] :from links :where (= to $s1) :and from :not :like $s2] file &amp;#34;%private%&amp;#34;)))) (defun jethro/org-export-preprocessor (_backend) (when-let ((links (jethro/org-roam--backlinks-list (buffer-file-name)))) (insert &amp;#34;\n** Backlinks\n&amp;#34;) (dolist (link links) (insert (format &amp;#34;- [[file:%s][%s]]\n&amp;#34; (file-relative-name link org-roam-directory) (org-roam--get-title-or-slug link)))))) (add-hook &amp;#39;org-export-before-processing-hook #&amp;#39;jethro/org-export-preprocessor))</description></item></channel></rss>