<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>riscv on Ben Mezger</title><link>https://seds.nl/tags/riscv/</link><description>Recent content in riscv on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Mar 2021 22:43:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/riscv/index.xml" rel="self" type="application/rss+xml"/><item><title>Symbol format 'elf64-littleriscv' unknown</title><link>https://seds.nl/notes/symbol_format_elf64_littleriscv_unknown/</link><pubDate>Mon, 01 Mar 2021 22:43:00 -0300</pubDate><guid>https://seds.nl/notes/symbol_format_elf64_littleriscv_unknown/</guid><description>tags RISCV Compiler After an hour of compiling RISC-V&amp;rsquo;s toolchain, I ran riscv64-unknown-elf-gdb remotely against my Rust kernel running in Qemu. This happened.
riscv64-unknown-elf-gdb \ -q \ -ex &amp;#39;file target/riscv64gc-unknown-none-elf/debug/strail-rs&amp;#39; \ -ex &amp;#39;target remote localhost:3333&amp;#39; \ -ex &amp;#34;b main&amp;#34; Reading symbols from target/riscv64gc-unknown-none-elf/debug/strail-rs... I&amp;#39;m sorry, Dave, I can&amp;#39;t do that. Symbol format `elf64-littleriscv&amp;#39; unknown. Remote debugging using localhost:3333 make: *** [gdb] Abort trap: 6 What the hell. I immediately started to investigate what is going on, is it my build system?</description></item><item><title>Notes on RISC-V CPU HARD IP Cores enter SoC FPGAs</title><link>https://seds.nl/notes/notes_on_risc_v_cpu_hard_ip_cores_enter_soc_fpgas/</link><pubDate>Mon, 16 Nov 2020 22:49:00 -0300</pubDate><guid>https://seds.nl/notes/notes_on_risc_v_cpu_hard_ip_cores_enter_soc_fpgas/</guid><description> tags RISCV Computer Architecture Notes on RISC-V CPU HARD IP Cores enter SoC FPGAs presentation
Frozen base ISA Consolidation in the semiconductor industry RISC-V is not owned by anyone Custom instruction extension to extend the virtuous cycle of semiconductor innovation PolarFire SoC - RISC-V enabled innocation platform # Mixed critically RTOS + Linux support Defence grade security Exceptional reliability Designed for low-power L2 memory subsystem Can be made to be deterministic Not all L2 are deterministic</description></item><item><title>RISCV</title><link>https://seds.nl/notes/riscv/</link><pubDate>Sun, 31 May 2020 12:37:00 -0300</pubDate><guid>https://seds.nl/notes/riscv/</guid><description>tags Computer Science Operating Systems Computer Architecture Understanding RISCV stack pointer # L06 RISCV Functions(6up).pdf # Exceptions # Exception are unusual condition occurring at run time associated with an instruction in the current RISCV thread. Exceptions may be converted to traps, but that all depends on the execution environment.
Traps # Trap refers to the synchronous transfer control to a trap handler caused by an exceptional condition occurring within a RISC thread.</description></item><item><title>Understanding key concepts before writing a Kernel</title><link>https://seds.nl/posts/writting-a-kernel-part-1/</link><pubDate>Sun, 03 May 2020 12:42:00 -0300</pubDate><guid>https://seds.nl/posts/writting-a-kernel-part-1/</guid><description>In this series of posts, I intend to document my re-go on writing a small, portable kernel for the RISC-V architecture. I developed a micro-kernel for the RISC-V ISA in my bachelor thesis, however, due to the time it takes on developing a kernel, and the time I had on writing a bachelor&amp;rsquo;s thesis, I choose on writing the kernel for the Sifive&amp;rsquo;s HiFive1 Rev B development board due to their well written bare metal compatibility Library for the board, low cost and most importantly, RISC-V.</description></item></channel></rss>