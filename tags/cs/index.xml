<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs on Ben Mezger</title><link>https://seds.nl/tags/cs/</link><description>Recent content in cs on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 23 Jun 2020 09:50:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>Methodologies</title><link>https://seds.nl/notes/methodologies/</link><pubDate>Tue, 23 Jun 2020 09:50:00 -0300</pubDate><guid>https://seds.nl/notes/methodologies/</guid><description> tags Programming Software Engineering</description></item><item><title>Software Engineering</title><link>https://seds.nl/notes/software_engineering/</link><pubDate>Tue, 23 Jun 2020 09:50:00 -0300</pubDate><guid>https://seds.nl/notes/software_engineering/</guid><description> tags Programming Computer Science</description></item><item><title>Use case template</title><link>https://seds.nl/notes/use_case_template/</link><pubDate>Tue, 23 Jun 2020 09:49:00 -0300</pubDate><guid>https://seds.nl/notes/use_case_template/</guid><description>tags Computer Science Programming Methodologies Software Engineering The following is a requirements template developed by Alistair Cockburn. This template may or may not have all or more fields related to the requirements itself.
Recommended reading:
Basic Use Case Template USE CASE #N Goal in context Scope Level &amp;lt;one of: Summary, Primary task, Subfunction&amp;gt; Preconditions Success end condition Failed end condition Primary actor &amp;lt;a role name for the primary actor, or description&amp;gt; Trigger &amp;lt;the action upon the system that starts the use case, may be time event&amp;gt; Priority &amp;lt;how critical to your system/organization&amp;gt; Frequency Usage example:</description></item><item><title>Go interfaces</title><link>https://seds.nl/notes/go_interfaces/</link><pubDate>Mon, 22 Jun 2020 20:26:00 -0300</pubDate><guid>https://seds.nl/notes/go_interfaces/</guid><description>tags Go Programming Programming Code snippets The following implements a DataModel, like Django&amp;rsquo;s Model class which requires Validate and Save methods be implemented by whoever uses that Interface. The problem is the Model. m object will be nil, because Model cannot access the User due to the embedded Model struct within the User struct.
package main import &amp;#34;fmt&amp;#34; type DataModel interface { Validate() Save() } type Model struct { DataModel } func (m *Model) Validate(){ fmt.</description></item><item><title>Database</title><link>https://seds.nl/notes/database/</link><pubDate>Sun, 21 Jun 2020 03:24:00 -0300</pubDate><guid>https://seds.nl/notes/database/</guid><description>Notes from Data and Reality: A Timeless Perspective on Perceiving and Managing Information in Our Imprecise World
William tries to approach data towards how we perceive the world. The following key concepts can be considered in data modeling as to our inner domain.
Existence: To what extend are you really present and engaged in the process of life around yourself? How real are the physical things around you? Identity: Who are you?</description></item><item><title>Postgres</title><link>https://seds.nl/notes/postgres/</link><pubDate>Sun, 21 Jun 2020 03:22:00 -0300</pubDate><guid>https://seds.nl/notes/postgres/</guid><description> tags Computer Architecture Computer Science Database</description></item><item><title>Go defer</title><link>https://seds.nl/notes/go_defer/</link><pubDate>Fri, 19 Jun 2020 09:47:00 -0300</pubDate><guid>https://seds.nl/notes/go_defer/</guid><description> tags Go Programming Programming import &amp;#34;fmt&amp;#34; func trace(name string) string { fmt.Println(&amp;#34;Entering &amp;#34;, name) return name } func un(name string) string { fmt.Println(&amp;#34;Exiting&amp;#34;, name) return name } func a() { defer un(trace(&amp;#34;a&amp;#34;)) fmt.Println(&amp;#34;Hello, world&amp;#34;) } func b(){ defer un(trace(&amp;#34;b&amp;#34;)) fmt.Println(&amp;#34;Before i &amp;lt; 10 loop&amp;#34;) for i:=0 ; i &amp;lt; 10; i++{ defer fmt.Println(&amp;#34;i =&amp;#34;, i) } fmt.Println(&amp;#34;After i &amp;lt; 10 loop&amp;#34;) } func main(){ a() b() } Entering a Hello, world Exiting a Entering b Before i &amp;lt; 10 loop After i &amp;lt; 10 loop i = 9 i = 8 i = 7 i = 6 i = 5 i = 4 i = 3 i = 2 i = 1 i = 0 Exiting b</description></item><item><title>Coding Theory</title><link>https://seds.nl/notes/c-coding-theory/</link><pubDate>Sun, 31 May 2020 16:10:00 -0300</pubDate><guid>https://seds.nl/notes/c-coding-theory/</guid><description>tags Information Theory Computer Science Programming Related video: https://www.khanacademy.org/computing/computer-science/informationtheory/info-theory/v/source-encoding-language-of-coins-4-9
Source encoding # Say Alice and Bob want to communicate with each other over some cable. They both live far from each other, so they decided to run a wire between both of their houses. Their communication has been working fine until winter. When winter arrived, lots wind noise started to happen and they are unable to communicate with each other over their cable communication system.</description></item><item><title>Binary calculation</title><link>https://seds.nl/notes/binary-calculation/</link><pubDate>Sun, 31 May 2020 13:06:00 -0300</pubDate><guid>https://seds.nl/notes/binary-calculation/</guid><description>tags Math Computer Science Computer Architecture The b before the code blocks mean binary number, to avoid confusion
Binary Addition # Possibilities # A OP B \= 1 + 1 10 1 + 0 1 0 + 1 1 0 + 0 0 1 + 1+1 11 Carry is involved whenever we have a result larger than bin 1</description></item><item><title>Compiler</title><link>https://seds.nl/notes/compiler/</link><pubDate>Sun, 31 May 2020 13:03:00 -0300</pubDate><guid>https://seds.nl/notes/compiler/</guid><description>tags Computer Science Programming Syntax Analysis # Syntax analysis happens after the Lexical phase, and it is responsible for detecting syntax errors.
Grammar # Be design, computer languages have defined structure of what constitutes a valid program. in Python, a program is made up of functions/classes/imports, a function requires declarations and/or statements and so on. In C, a valid program needs to have a least a function called main, otherwise the GNU&amp;rsquo;s linker is unable to link the program.</description></item><item><title>Computer Architecture</title><link>https://seds.nl/notes/computer-architecture/</link><pubDate>Sun, 31 May 2020 13:01:00 -0300</pubDate><guid>https://seds.nl/notes/computer-architecture/</guid><description/></item><item><title>RISCV</title><link>https://seds.nl/notes/riscv/</link><pubDate>Sun, 31 May 2020 12:37:00 -0300</pubDate><guid>https://seds.nl/notes/riscv/</guid><description>tags Computer Science Operating Systems Computer Architecture Understanding RISCV stack pointer # L06 RISCV Functions(6up).pdf # Exceptions # Exception are unusual condition occurring at run time associated with an instruction in the current RISCV thread. Exceptions may be converted to traps, but that all depends on the execution environment.
Traps # Trap refers to the synchronous transfer control to a trap handler caused by an exceptional condition occurring within a RISC thread.</description></item><item><title>Computer Science</title><link>https://seds.nl/notes/computer-science/</link><pubDate>Sun, 31 May 2020 12:29:00 -0300</pubDate><guid>https://seds.nl/notes/computer-science/</guid><description/></item><item><title>Operating Systems</title><link>https://seds.nl/notes/operating-systems/</link><pubDate>Sun, 31 May 2020 12:29:00 -0300</pubDate><guid>https://seds.nl/notes/operating-systems/</guid><description>tags Thesis Computer Science OS Kit # The OSKit is a framework and a set of 34 component libraries oriented to operating systems, together with extensive documentation. By providing in a modular way not only most of the infrastructure &amp;ldquo;grunge&amp;rdquo; needed by an OS, but also many higher-level components, the OSKit&amp;rsquo;s goal is to lower the barrier to entry to OS R&amp;amp;D and to lower its costs. The OSKit makes it vastly easier to create a new OS, port an existing OS to the x86 (or in the future, to other architectures supported by the OSkit), or enhance an OS to support a wider range of devices, file system formats, executable formats, or network services.</description></item><item><title>Operating systems: Internals and design principles (9th edition)</title><link>https://seds.nl/notes/operating-systems/</link><pubDate>Sat, 30 May 2020 19:58:00 -0300</pubDate><guid>https://seds.nl/notes/operating-systems/</guid><description>tags Computer Science Operating Systems READING Operating Systems: Internals and Design Principles (9th Edition) # Table 1: Clock summary at [2020-06-06 Sat 03:47] Headline Time Total time 3:24 Operating Systems: Internals and&amp;hellip; 3:24 Exercises # 1.1. CPU: Takes care of processing data Main memory: Volatile memory for storing data and program instructions Secondary storage: Non-volatile for permantely storing data.</description></item></channel></rss>