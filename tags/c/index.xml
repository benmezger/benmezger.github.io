<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Ben Mezger</title><link>https://seds.nl/tags/c/</link><description>Recent content in C on Ben Mezger</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Feb 2021 23:50:00 -0300</lastBuildDate><atom:link href="https://seds.nl/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>C pointers</title><link>https://seds.nl/notes/c_pointers/</link><pubDate>Fri, 12 Feb 2021 23:50:00 -0300</pubDate><guid>https://seds.nl/notes/c_pointers/</guid><description>tags Programming Computer Science For understanding how pointers work, consider the following simplified memory layout. the memory address starts in 0x1 and goes up to address 0xA. The value row holds the current data stored in that memory cell. Address 0x1 holds a pointer to address 0x6, which in turn 0x6 holds the value s.
Address 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xA Value 0x6 s e d s \0 Variable name hostname hostname hostname + 1 hostname + 2 hostname + 3 hostname +4 .</description></item><item><title>Modeling C-based systems with UML</title><link>https://seds.nl/notes/modeling_c_based_systems_with_uml/</link><pubDate>Sat, 14 Nov 2020 12:54:00 -0300</pubDate><guid>https://seds.nl/notes/modeling_c_based_systems_with_uml/</guid><description>tags Software Engineering Methodologies Introduction # The Unified Modeling Language (UML) is used almost exclusively for Object Oriented Programming (OOP). Since embedded system design has become increasingly more complex, designers have been searching for new methodologies to manage these complexities and allowing higher productivity. Due to the exclusivity of UML for OOP, it makes it difficult for functional programmers to integrate UML concepts into the modeling because the transformation of many UML concepts to C is difficult and confusing (Wang 2009).</description></item><item><title>C programming</title><link>https://seds.nl/notes/c-programming/</link><pubDate>Sun, 31 May 2020 12:33:00 -0300</pubDate><guid>https://seds.nl/notes/c-programming/</guid><description>Tags Computer Science Programming C project architecture guidelines # Functions exposed in the header are like public methods # Think of each module like a class. The functions you expose in the header are like public methods. Only put a function in the header if it part of the module&amp;rsquo;s needed interface.
Avoiding circular module dependencies # Avoid circular module dependencies. Module A and module B should not call each other.</description></item><item><title>Understanding key concepts before writing a Kernel</title><link>https://seds.nl/posts/writting-a-kernel-part-1/</link><pubDate>Sun, 03 May 2020 12:42:00 -0300</pubDate><guid>https://seds.nl/posts/writting-a-kernel-part-1/</guid><description>In this series of posts, I intend to document my re-go on writing a small, portable kernel for the RISC-V architecture. I developed a micro-kernel for the RISC-V ISA in my bachelor thesis, however, due to the time it takes on developing a kernel, and the time I had on writing a bachelor&amp;rsquo;s thesis, I choose on writing the kernel for the Sifive&amp;rsquo;s HiFive1 Rev B development board due to their well written bare metal compatibility Library for the board, low cost and most importantly, RISC-V.</description></item></channel></rss>